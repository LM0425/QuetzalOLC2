/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,18],$V2=[1,19],$V3=[1,13],$V4=[1,17],$V5=[1,15],$V6=[1,16],$V7=[1,14],$V8=[1,20],$V9=[1,21],$Va=[1,22],$Vb=[1,23],$Vc=[1,24],$Vd=[1,25],$Ve=[5,27,31,34,35],$Vf=[2,5,15,19,22,27,29,31,34,35,36,38,39,42,43,44,45,46,47],$Vg=[1,34],$Vh=[2,37],$Vi=[1,43],$Vj=[1,50],$Vk=[1,45],$Vl=[1,46],$Vm=[1,47],$Vn=[1,48],$Vo=[1,49],$Vp=[1,70],$Vq=[1,69],$Vr=[1,71],$Vs=[1,72],$Vt=[8,18,20,32,48,49,50,51,52,53,54,55,56,57,61],$Vu=[18,20],$Vv=[1,87],$Vw=[8,18,20,32,48,49,50,51,52,53,54,55,61],$Vx=[1,117],$Vy=[31,34];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"variables":7,"RPTCOMA":8,"if_instruccion":9,"while_instruccion":10,"switch_instruccion":11,"funcion_instruccion":12,"llamar_funcion":13,"imprimir":14,"RPRINTLN":15,"RPARIZQ":16,"l_expresiones":17,"RPARDER":18,"RPRINT":19,"RCOMA":20,"expresion":21,"ID":22,"listaid":23,"tipo":24,"parametros":25,"RLLAVEIZQ":26,"RLLAVEDER":27,"parametro":28,"RSWITCH":29,"l_case":30,"RDEFAULT":31,"RDOSPUNTOS":32,"case":33,"RCASE":34,"RBREACK":35,"RWHILE":36,"condicion":37,"RDO":38,"RIF":39,"RELSE":40,"RIGUAL":41,"RINT":42,"RDOUBLE":43,"RFLOAT":44,"RSTRING":45,"RCHAR":46,"RBOOLEAN":47,"RMAYORIGUAL":48,"RMENORIGUAL":49,"RIGUALIGUAL":50,"RDIFERENTE":51,"RMAYOR":52,"RMENOR":53,"MENOS":54,"MAS":55,"POR":56,"DIVIDIDO":57,"ENTERO":58,"DECIMAL":59,"PARIZQ":60,"PARDER":61,"CADENA":62,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"RPTCOMA",15:"RPRINTLN",16:"RPARIZQ",18:"RPARDER",19:"RPRINT",20:"RCOMA",22:"ID",26:"RLLAVEIZQ",27:"RLLAVEDER",29:"RSWITCH",31:"RDEFAULT",32:"RDOSPUNTOS",34:"RCASE",35:"RBREACK",36:"RWHILE",38:"RDO",39:"RIF",40:"RELSE",41:"RIGUAL",42:"RINT",43:"RDOUBLE",44:"RFLOAT",45:"RSTRING",46:"RCHAR",47:"RBOOLEAN",48:"RMAYORIGUAL",49:"RMENORIGUAL",50:"RIGUALIGUAL",51:"RDIFERENTE",52:"RMAYOR",53:"RMENOR",54:"MENOS",55:"MAS",56:"POR",57:"DIVIDIDO",58:"ENTERO",59:"DECIMAL",60:"PARIZQ",61:"PARDER",62:"CADENA"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[14,4],[14,4],[17,3],[17,1],[13,3],[13,4],[12,7],[12,6],[25,3],[25,1],[28,2],[11,10],[30,2],[30,1],[33,4],[33,6],[10,7],[10,9],[9,9],[9,11],[9,7],[7,4],[7,2],[7,3],[23,3],[23,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[21,2],[21,3],[21,3],[21,3],[21,3],[21,1],[21,1],[21,3],[21,1],[21,1],[21,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 4:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 33:
 console.log("Variable declarada de tipo " + $$[$0-3] + " con nombre " + $$[$0-2] + "y valor " + $$[$0]);
break;
case 34:
 console.log("lista de variables de tipo " + $$[$0-1] + " con variables " + $$[$0]);
break;
case 35:
 console.log("asignacion a variable " + $$[$0-2] + " de neuvo valor " + $$[$0]);
break;
case 36:
this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 37:
 this.$ = new Array(); this.$.push($$[$0]); 
break;
case 50:
 this.$ = $$[$0] *-1; 
break;
case 51:
 this.$ = $$[$0-2] + $$[$0]; 
break;
case 52:
 this.$ = $$[$0-2] - $$[$0]; 
break;
case 53:
 this.$ = $$[$0-2] * $$[$0]; 
break;
case 54:
 this.$ = $$[$0-2] / $$[$0]; 
break;
case 55: case 56:
 this.$ = Number($$[$0]); 
break;
case 57:
 this.$ = $$[$0-1]; 
break;
case 58:
 this.$ = $$[$0];
break;
case 59:
 this.$ = $$[$0]; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V1,19:$V2,22:$V3,24:12,29:$V4,36:$V5,38:$V6,39:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd},{1:[3]},{5:[1,26]},o($Ve,[2,3],{6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,24:12,4:27,2:$V0,15:$V1,19:$V2,22:$V3,29:$V4,36:$V5,38:$V6,39:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd}),o($Ve,[2,4]),{8:[1,28]},o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),{8:[1,29]},{8:[1,30]},{22:[1,31],23:32},{16:$Vg,41:[1,33]},{16:[1,35]},{16:[1,36]},{26:[1,37]},{16:[1,38]},{16:[1,39]},{16:[1,40]},{22:[2,38]},{22:[2,39]},{22:[2,40]},{22:[2,41]},{22:[2,42]},{22:[2,43]},{1:[2,1]},o($Ve,[2,2]),o($Vf,[2,5]),o($Vf,[2,10]),o($Vf,[2,11]),o([8,20],$Vh,{16:[1,42],41:[1,41]}),{8:[2,34],20:$Vi},{13:51,21:44,22:$Vj,54:$Vk,58:$Vl,59:$Vm,60:$Vn,62:$Vo},{18:[1,52],22:[1,54],23:53},{13:51,21:56,22:$Vj,37:55,54:$Vk,58:$Vl,59:$Vm,60:$Vn,62:$Vo},{13:51,21:56,22:$Vj,37:57,54:$Vk,58:$Vl,59:$Vm,60:$Vn,62:$Vo},{2:$V0,4:58,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V1,19:$V2,22:$V3,24:12,29:$V4,36:$V5,38:$V6,39:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd},{13:51,21:59,22:$Vj,54:$Vk,58:$Vl,59:$Vm,60:$Vn,62:$Vo},{13:51,17:60,21:61,22:$Vj,54:$Vk,58:$Vl,59:$Vm,60:$Vn,62:$Vo},{13:51,17:62,21:61,22:$Vj,54:$Vk,58:$Vl,59:$Vm,60:$Vn,62:$Vo},{13:51,21:63,22:$Vj,54:$Vk,58:$Vl,59:$Vm,60:$Vn,62:$Vo},{18:[1,65],24:67,25:64,28:66,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd},{22:[1,68]},{8:[2,35],54:$Vp,55:$Vq,56:$Vr,57:$Vs},{13:51,21:73,22:$Vj,54:$Vk,58:$Vl,59:$Vm,60:$Vn,62:$Vo},o($Vt,[2,55]),o($Vt,[2,56]),{13:51,21:74,22:$Vj,54:$Vk,58:$Vl,59:$Vm,60:$Vn,62:$Vo},o($Vt,[2,58]),o($Vt,[2,59],{16:$Vg}),o($Vt,[2,60]),o($Vt,[2,16]),{18:[1,75],20:$Vi},o($Vu,$Vh),{18:[1,76]},{48:[1,77],49:[1,78],50:[1,79],51:[1,80],52:[1,81],53:[1,82],54:$Vp,55:$Vq,56:$Vr,57:$Vs},{18:[1,83]},{27:[1,84]},{18:[1,85],54:$Vp,55:$Vq,56:$Vr,57:$Vs},{18:[1,86],20:$Vv},o($Vu,[2,15],{54:$Vp,55:$Vq,56:$Vr,57:$Vs}),{18:[1,88],20:$Vv},{8:[2,33],54:$Vp,55:$Vq,56:$Vr,57:$Vs},{18:[1,89],20:[1,90]},{26:[1,91]},o($Vu,[2,21]),{22:[1,92]},o([8,18,20],[2,36]),{13:51,21:93,22:$Vj,54:$Vk,58:$Vl,59:$Vm,60:$Vn,62:$Vo},{13:51,21:94,22:$Vj,54:$Vk,58:$Vl,59:$Vm,60:$Vn,62:$Vo},{13:51,21:95,22:$Vj,54:$Vk,58:$Vl,59:$Vm,60:$Vn,62:$Vo},{13:51,21:96,22:$Vj,54:$Vk,58:$Vl,59:$Vm,60:$Vn,62:$Vo},o($Vt,[2,50]),{54:$Vp,55:$Vq,56:$Vr,57:$Vs,61:[1,97]},o($Vt,[2,17]),{26:[1,98]},{13:51,21:99,22:$Vj,54:$Vk,58:$Vl,59:$Vm,60:$Vn,62:$Vo},{13:51,21:100,22:$Vj,54:$Vk,58:$Vl,59:$Vm,60:$Vn,62:$Vo},{13:51,21:101,22:$Vj,54:$Vk,58:$Vl,59:$Vm,60:$Vn,62:$Vo},{13:51,21:102,22:$Vj,54:$Vk,58:$Vl,59:$Vm,60:$Vn,62:$Vo},{13:51,21:103,22:$Vj,54:$Vk,58:$Vl,59:$Vm,60:$Vn,62:$Vo},{13:51,21:104,22:$Vj,54:$Vk,58:$Vl,59:$Vm,60:$Vn,62:$Vo},{26:[1,105]},{36:[1,106]},{26:[1,107]},{8:[2,12]},{13:51,21:108,22:$Vj,54:$Vk,58:$Vl,59:$Vm,60:$Vn,62:$Vo},{8:[2,13]},{26:[1,109]},{24:67,28:110,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd},{27:[1,111]},o($Vu,[2,22]),o($Vw,[2,51],{56:$Vr,57:$Vs}),o($Vw,[2,52],{56:$Vr,57:$Vs}),o($Vt,[2,53]),o($Vt,[2,54]),o($Vt,[2,57]),{2:$V0,4:112,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V1,19:$V2,22:$V3,24:12,29:$V4,36:$V5,38:$V6,39:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd},{18:[2,44],54:$Vp,55:$Vq,56:$Vr,57:$Vs},{18:[2,45],54:$Vp,55:$Vq,56:$Vr,57:$Vs},{18:[2,46],54:$Vp,55:$Vq,56:$Vr,57:$Vs},{18:[2,47],54:$Vp,55:$Vq,56:$Vr,57:$Vs},{18:[2,48],54:$Vp,55:$Vq,56:$Vr,57:$Vs},{18:[2,49],54:$Vp,55:$Vq,56:$Vr,57:$Vs},{2:$V0,4:113,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V1,19:$V2,22:$V3,24:12,29:$V4,36:$V5,38:$V6,39:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd},{16:[1,114]},{30:115,33:116,34:$Vx},o($Vu,[2,14],{54:$Vp,55:$Vq,56:$Vr,57:$Vs}),{27:[1,118]},o($Vu,[2,20]),o($Vf,[2,19]),{27:[1,119]},{27:[1,120]},{13:51,21:56,22:$Vj,37:121,54:$Vk,58:$Vl,59:$Vm,60:$Vn,62:$Vo},{31:[1,122],33:123,34:$Vx},o($Vy,[2,25]),{13:51,21:124,22:$Vj,54:$Vk,58:$Vl,59:$Vm,60:$Vn,62:$Vo},o($Vf,[2,18]),o($Vf,[2,32],{40:[1,125]}),o($Vf,[2,28]),{18:[1,126]},{32:[1,127]},o($Vy,[2,24]),{32:[1,128],54:$Vp,55:$Vq,56:$Vr,57:$Vs},{9:129,26:[1,130],39:$V7},{8:[1,131]},{2:$V0,4:132,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V1,19:$V2,22:$V3,24:12,29:$V4,36:$V5,38:$V6,39:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd},{2:$V0,4:133,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V1,19:$V2,22:$V3,24:12,29:$V4,36:$V5,38:$V6,39:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd},o($Vf,[2,30]),{2:$V0,4:134,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V1,19:$V2,22:$V3,24:12,29:$V4,36:$V5,38:$V6,39:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,46:$Vc,47:$Vd},o($Vf,[2,29]),{27:[1,135]},o($Vy,[2,26],{35:[1,136]}),{27:[1,137]},o($Vf,[2,23]),{8:[1,138]},o($Vf,[2,31]),o($Vy,[2,27])],
defaultActions: {20:[2,38],21:[2,39],22:[2,40],23:[2,41],24:[2,42],25:[2,43],26:[2,1],86:[2,12],88:[2,13]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 8;
break;
case 1:return 20;
break;
case 2:return 16;
break;
case 3:return 18;
break;
case 4:return 'RCORIZQ';
break;
case 5:return 'RCORDER';
break;
case 6:return 26;
break;
case 7:return 27;
break;
case 8:return	'RDOSPUNTOS'
break;
case 9:return 'RMAS';
break;
case 10:return 'RMENOS';
break;
case 11:return 'RPOR';
break;
case 12:return 'RDIVIDIDO';
break;
case 13:return 'RSTRUCT';
break;
case 14:return 42;
break;
case 15:return 43;
break;
case 16:return 44;
break;
case 17:return 45;
break;
case 18:return 46
break;
case 19:return 47;
break;
case 20:return 'RNULL';
break;
case 21:return 50;
break;
case 22:return 51;
break;
case 23:return 'RNOT';
break;
case 24:return 48;
break;
case 25:return 49;
break;
case 26:return 53;
break;
case 27:return 52;
break;
case 28:return 'RAND';
break;
case 29:return 'ROR';
break;
case 30:return 'RSIN';
break;
case 31:return 'RLOG10';
break;
case 32:return 'RCOS';
break;
case 33:return 'RTAN';
break;
case 34:return 'RSQRT';
break;
case 35:return 41;
break;
case 36:return 'RPUNTO';
break;
case 37:return 'RFOR';
break;
case 38:return 29;
break;
case 39:return 35;
break;
case 40:return 34;
break;
case 41:return 31;
break;
case 42:return 36;
break;
case 43:return  'RDO';
break;
case 44:return 39;
break;
case 45:return  'RELSE';
break;
case 46:return  'RIN';
break;
case 47:return 15;
break;
case 48:return 19;
break;
case 49:
break;
case 50:
break;
case 51:
break;
case 52:
break;
case 53:return 59;
break;
case 54:return 58;
break;
case 55:return 22;
break;
case 56:return  'CADENA';
break;
case 57:return 'CARACTER';
break;
case 58:return 5;
break;
case 59: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:;)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?::)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:struct\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:float\b)/i,/^(?:String\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:null\b)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:sin\b)/i,/^(?:log10\b)/i,/^(?:cos\b)/i,/^(?:tan\b)/i,/^(?:sqrt\b)/i,/^(?:=)/i,/^(?:\\\.)/i,/^(?:for\b)/i,/^(?:switch\b)/i,/^(?:breack\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:in\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:[//.*])/i,/^(?:[/\*(.|\n)*?\*/])/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:[a-zA-Z][a-zA-Z_0-9]*)/i,/^(?:[\"[^\']*?")/i,/^(?:[\'[^\'\\]')/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}