/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,16],$V2=[1,23],$V3=[1,60],$V4=[1,36],$V5=[1,37],$V6=[1,38],$V7=[1,39],$V8=[1,40],$V9=[1,35],$Va=[1,41],$Vb=[1,42],$Vc=[1,43],$Vd=[1,44],$Ve=[1,45],$Vf=[1,46],$Vg=[1,47],$Vh=[1,48],$Vi=[1,49],$Vj=[1,51],$Vk=[1,52],$Vl=[1,53],$Vm=[1,54],$Vn=[1,55],$Vo=[1,56],$Vp=[1,57],$Vq=[1,58],$Vr=[1,59],$Vs=[1,27],$Vt=[1,28],$Vu=[1,29],$Vv=[1,34],$Vw=[1,25],$Vx=[1,26],$Vy=[1,30],$Vz=[1,31],$VA=[1,32],$VB=[1,33],$VC=[5,19,27,31,36,37,38,39,40,41,42,57,58,59,60,61,62,63,64,70,71,72,73,74,75,81,82,83,90,92,94,98,99,100,101,106,108,110,111,112,115],$VD=[34,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],$VE=[2,68],$VF=[2,67],$VG=[1,76],$VH=[1,77],$VI=[2,62],$VJ=[1,78],$VK=[1,82],$VL=[1,81],$VM=[1,85],$VN=[1,84],$VO=[1,86],$VP=[1,87],$VQ=[1,88],$VR=[1,89],$VS=[1,90],$VT=[1,91],$VU=[1,92],$VV=[1,93],$VW=[1,94],$VX=[1,95],$VY=[1,96],$VZ=[1,97],$V_=[1,98],$V$=[1,109],$V01=[1,113],$V11=[27,31,34],$V21=[2,38],$V31=[2,34],$V41=[8,28,32,34,35,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,65,69,91],$V51=[8,35],$V61=[2,32],$V71=[1,132],$V81=[2,65],$V91=[1,140],$Va1=[1,146],$Vb1=[1,147],$Vc1=[1,149],$Vd1=[1,150],$Ve1=[1,151],$Vf1=[1,152],$Vg1=[1,153],$Vh1=[1,154],$Vi1=[35,65],$Vj1=[2,123],$Vk1=[1,184],$Vl1=[8,28,32,35,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,65,69,91],$Vm1=[8,28,32,35,55,56,65,69,91],$Vn1=[32,35],$Vo1=[1,205],$Vp1=[5,8,19,27,28,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,69,70,71,72,73,74,75,81,82,83,90,91,92,94,98,99,100,101,106,108,110,111,112,115],$Vq1=[2,86],$Vr1=[32,69],$Vs1=[8,28,32,35,42,43,47,48,49,50,51,52,53,54,55,56,65,69,91],$Vt1=[8,28,32,35,49,50,51,52,53,54,55,56,65,69,91],$Vu1=[1,224],$Vv1=[2,125],$Vw1=[1,226],$Vx1=[8,28,31,32,34,35,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,65,69,91],$Vy1=[35,92],$Vz1=[1,301],$VA1=[98,99];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"variables":7,"PTCOMA":8,"imprimir":9,"if":10,"switch":11,"break":12,"incr_decr":13,"while_instruccion":14,"do_instruccion":15,"struct_crear":16,"for":17,"llamada_struct":18,"continue":19,"return":20,"modificarArreglo":21,"main":22,"funcion":23,"llamada":24,"ptc":25,"tipo":26,"ID":27,"IGUAL":28,"expresion":29,"listaid":30,"CORIZQ":31,"CORDER":32,"NUMERAL":33,"PUNTO":34,"COMA":35,"RINT":36,"RDOUBLE":37,"RSTRING":38,"RCHAR":39,"RBOOLEAN":40,"RVOID":41,"MENOS":42,"MAS":43,"POR":44,"DIVIDIDO":45,"MODULO":46,"CONCATENAR":47,"REPETICION":48,"MENOR":49,"MAYOR":50,"MENORIGUAL":51,"MAYORIGUAL":52,"IGUALIGUAL":53,"DIFERENTE":54,"AND":55,"OR":56,"NOT":57,"ENTERO":58,"DECIMAL":59,"CADENA":60,"CARACTER":61,"RTRUE":62,"RFALSE":63,"PARIZQ":64,"PARDER":65,"declaracionArregloT1":66,"listaExpresiones":67,"posicion":68,"DOSPT":69,"RPOW":70,"RRAIZ":71,"RSIN":72,"RCOS":73,"RTAN":74,"RLOG":75,"RCARACTEROFPOSITION":76,"RSUBSTRING":77,"RTOUPPERCASE":78,"RTOLOWERCASE":79,"RPARSE":80,"RTOINT":81,"RSSTRING":82,"RTYPEOF":83,"RPOP":84,"RLENGTH":85,"RBEGIN":86,"REND":87,"listaValores":88,"valores":89,"RIF":90,"LLAVEIZQ":91,"LLAVEDER":92,"RELSE":93,"RSWITCH":94,"caselist":95,"default":96,"case":97,"RCASE":98,"RDEFAULT":99,"RBREAK":100,"RRETURN":101,"parametros":102,"parametro":103,"parametrosLlamada":104,"RMAIN":105,"RPRINT":106,"listaImprimir":107,"RPRINTLN":108,"accesoStruct":109,"RWHILE":110,"RDO":111,"RSTRUCT":112,"l_atributos":113,"atributo":114,"RFOR":115,"RIN":116,"l_expresiones":117,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PTCOMA",19:"continue",27:"ID",28:"IGUAL",31:"CORIZQ",32:"CORDER",33:"NUMERAL",34:"PUNTO",35:"COMA",36:"RINT",37:"RDOUBLE",38:"RSTRING",39:"RCHAR",40:"RBOOLEAN",41:"RVOID",42:"MENOS",43:"MAS",44:"POR",45:"DIVIDIDO",46:"MODULO",47:"CONCATENAR",48:"REPETICION",49:"MENOR",50:"MAYOR",51:"MENORIGUAL",52:"MAYORIGUAL",53:"IGUALIGUAL",54:"DIFERENTE",55:"AND",56:"OR",57:"NOT",58:"ENTERO",59:"DECIMAL",60:"CADENA",61:"CARACTER",62:"RTRUE",63:"RFALSE",64:"PARIZQ",65:"PARDER",69:"DOSPT",70:"RPOW",71:"RRAIZ",72:"RSIN",73:"RCOS",74:"RTAN",75:"RLOG",76:"RCARACTEROFPOSITION",77:"RSUBSTRING",78:"RTOUPPERCASE",79:"RTOLOWERCASE",80:"RPARSE",81:"RTOINT",82:"RSSTRING",83:"RTYPEOF",84:"RPOP",85:"RLENGTH",86:"RBEGIN",87:"REND",90:"RIF",91:"LLAVEIZQ",92:"LLAVEDER",93:"RELSE",94:"RSWITCH",98:"RCASE",99:"RDEFAULT",100:"RBREAK",101:"RRETURN",105:"RMAIN",106:"RPRINT",108:"RPRINTLN",110:"RWHILE",111:"RDO",112:"RSTRUCT",115:"RFOR",116:"RIN"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,2],[6,2],[6,1],[6,1],[6,2],[6,2],[6,1],[6,2],[6,2],[6,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[25,1],[25,0],[7,4],[7,2],[7,3],[7,6],[7,7],[7,6],[7,5],[30,3],[30,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[29,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,3],[29,1],[29,2],[29,6],[29,1],[29,1],[29,6],[29,4],[29,4],[29,4],[29,4],[29,4],[29,6],[29,8],[29,5],[29,5],[29,6],[29,4],[29,4],[29,4],[29,4],[29,5],[29,5],[68,1],[68,1],[68,1],[66,3],[88,3],[88,1],[89,1],[89,1],[21,5],[67,4],[67,3],[10,7],[10,11],[10,9],[10,5],[11,8],[95,2],[95,1],[97,4],[96,3],[12,1],[20,2],[23,8],[23,7],[102,3],[102,1],[103,4],[103,2],[24,4],[24,3],[104,3],[104,1],[22,7],[9,4],[9,4],[107,4],[107,2],[107,0],[109,2],[109,0],[13,3],[13,3],[14,7],[15,8],[16,5],[113,3],[113,1],[114,2],[17,11],[17,7],[117,3],[117,1],[18,7]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = $$[$0-1]; return this.$;
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 91: case 103: case 111: case 117: case 132: case 137:
 this.$ = [$$[$0]]; 
break;
case 4:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 5: case 6: case 9: case 10: case 12: case 13: case 15: case 16: case 17: case 21: case 63: case 89:
 this.$ = $$[$0-1]; 
break;
case 7: case 8: case 11: case 14: case 18: case 19: case 20: case 67: case 68: case 86: case 92: case 93:
 this.$ = $$[$0]; 
break;
case 24:
 this.$ = new Declaracion($$[$0-3], [$$[$0-2]], _$[$0-3].first_line, _$[$0-3].first_column, $$[$0], false, false, false); 
break;
case 25:
 this.$ = new Declaracion($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column, null, false, false, false); 
break;
case 26:
 this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 27:
 this.$ = new Declaracion($$[$0-5], [$$[$0-2]], _$[$0-5].first_line, _$[$0-5].first_column, $$[$0], true, true, false); 
break;
case 28:
 this.$ = new Declaracion($$[$0-6], [$$[$0-3]], _$[$0-6].first_line, _$[$0-6].first_column, $$[$0], true, false, true); 
break;
case 29:
 this.$ = new Declaracion($$[$0-5], [$$[$0-2]], _$[$0-5].first_line, _$[$0-5].first_column, $$[$0], true, false, false); 
break;
case 30:
 this.$ = new Asignacion_atributo($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 31:
this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 32:
 this.$ = new Array(); this.$.push($$[$0]); 
break;
case 33:
 this.$ = Tipo.INT; 
break;
case 34:
 this.$ = Tipo.DOUBLE; 
break;
case 35:
 this.$ = Tipo.STRING; 
break;
case 36:
 this.$ = Tipo.CHAR; 
break;
case 37:
 this.$ = Tipo.BOOL; 
break;
case 38:
 this.$ = Tipo.VOID; 
break;
case 39:
 this.$ = new Aritmetica(OperadorAritmetico.UMENOS, $$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 40:
 this.$ = new Aritmetica(OperadorAritmetico.MAS, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 41:
 this.$ = new Aritmetica(OperadorAritmetico.MENOS, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 42:
 this.$ = new Aritmetica(OperadorAritmetico.POR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 43:
 this.$ = new Aritmetica(OperadorAritmetico.DIV, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 44:
 this.$ = new Aritmetica(OperadorAritmetico.MOD, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 45:
 this.$ = new Aritmetica(OperadorAritmetico.CONCATENAR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 46:
 this.$ = new Aritmetica(OperadorAritmetico.REPETIR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 47:
 this.$ = new Relacional(OperadorRelacional.MENORQUE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 48:
 this.$ = new Relacional(OperadorRelacional.MAYORQUE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 49:
 this.$ = new Relacional(OperadorRelacional.MENORIGUAL, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 50:
 this.$ = new Relacional(OperadorRelacional.MAYORIGUAL, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 51:
 this.$ = new Relacional(OperadorRelacional.IGUALIGUAL, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 52:
 this.$ = new Relacional(OperadorRelacional.DIFERENTE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 53:
 this.$ = new Logica(OperadorLogico.AND, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 54:
 this.$ = new Logica(OperadorLogico.OR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 55:
 this.$ = new Logica(OperadorLogico.NOT, $$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 56:
 this.$ = new Primitivos(Tipo.INT, Number($$[$0]), _$[$0].first_line, _$[$0].first_column); 
break;
case 57:
 this.$ = new Primitivos(Tipo.DOUBLE, Number($$[$0]), _$[$0].first_line, _$[$0].first_column); 
break;
case 58:
 this.$ = new Primitivos(Tipo.STRING, String($$[$0]), _$[$0].first_line, _$[$0].first_column); 
break;
case 59:
 this.$ = new Primitivos(Tipo.CHAR, String($$[$0]), _$[$0].first_line, _$[$0].first_column); 
break;
case 60:
 this.$ = new Primitivos(Tipo.BOOL, true, _$[$0].first_line, _$[$0].first_column); 
break;
case 61:
 this.$ = new Primitivos(Tipo.BOOL, false, _$[$0].first_line, _$[$0].first_column); 
break;
case 62:
 this.$ = new Identificador(String($$[$0]), _$[$0].first_line, _$[$0].first_column); 
break;
case 64:
 this.$ = new Primitivos(Tipo.ARRAY, $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 65:
 this.$ = new AccesoArreglo($$[$0-1], $$[$0], null, null, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 66:
 this.$ = new AccesoArreglo($$[$0-5], null, $$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 69:
 this.$ = new Pow($$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 70:
 this.$ = new Raiz($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 71:
 this.$ = new Seno($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 72:
 this.$ = new Coseno($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 73:
 this.$ = new Tangente($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 74:
 this.$ = new Log($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 75:
 this.$ = new Caracter($$[$0-5], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 76:
 this.$ = new SubString($$[$0-7], $$[$0-3], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 77:
 this.$ = new ToUpperCase($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 78:
 this.$ = new ToLowerCase($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 79:
 this.$ = new Parse($$[$0-5], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 80:
 this.$ = new ToInt($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 81:
 this.$ = new ToDouble($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 82:
 this.$ = new SString($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 83:
 this.$ = new TypeOf($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 84:
 this.$ = new Pop($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 85:
 this.$ = new Length($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 87: case 88:
 this.$ = true; 
break;
case 90:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2] 
break;
case 94:
 this.$ = new ModificarArreglo($$[$0-4], $$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 95:
 $$[$0-3].push($$[$0-1]); this.$ = $$[$0-3]; 
break;
case 96:
 this.$ = [$$[$0-1]] 
break;
case 97:
 this.$ = new If($$[$0-4], $$[$0-1], null, null, _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 98:
 this.$ = new If($$[$0-8], $$[$0-5], $$[$0-1], null, _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 99:
 this.$ = new If($$[$0-6], $$[$0-3], null, $$[$0], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 100:
 this.$ = new If($$[$0-2], [$$[$0]], null, null, _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 101:
 this.$ = new Switch($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 102:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 104:
 this.$ = new Case($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 105:
 this.$ = new Default($$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 106:
 this.$ = new Break(_$[$0].first_line, _$[$0].first_column); 
break;
case 107:
 this.$ = new Return($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 108:
 this.$ = new Funcion($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 109:
 this.$ = new Funcion($$[$0-6], $$[$0-5], [], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 110: case 116: case 131: case 136:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 112:
 this.$ = {'tipo': $$[$0-3], 'identificador': $$[$0-1], 'arreglo':true}; 
break;
case 113:
 this.$ = {'tipo': $$[$0-1], 'identificador': $$[$0], 'arreglo':false}; 
break;
case 114:
 this.$ = new Llamada($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 115:
 this.$ = new Llamada($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 118:
 this.$ = new Main($$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 119:
 this.$ = new Imprimir(false, $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 120:
 this.$ = new Imprimir(true, $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 121:
 $$[$0-3].push({'expresion':$$[$0-1], 'acceso': $$[$0]['acceso']}); this.$ = $$[$0-3]; 
break;
case 122:
 this.$ = [{'expresion':$$[$0-1], 'acceso': $$[$0]['acceso']}]; 
break;
case 123:
 this.$ = []; 
break;
case 124:
 this.$ = {'acceso': $$[$0]}; 
break;
case 125:
 this.$ = {'acceso': null}; 
break;
case 126:
this.$ = new inc_dec(OperadorAritmetico.MAS,$$[$0-2],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 127:
this.$ = new inc_dec(OperadorAritmetico.MENOS,$$[$0-2],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 128:
 this.$ = new While($$[$0-4],$$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 129:
 this.$ = new DoW($$[$0-1],$$[$0-5], _$[$0-7].first_line, _$[$0-7].first_column);
break;
case 130:
 this.$ = new Struct(Tipo.STRUCT, $$[$0-3], _$[$0-4].first_line, _$[$0-4].first_column, [$$[$0-1]]); 
break;
case 133:
 this.$ = new Declaracion_atributo($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column, null); 
break;
case 134:
 this.$ = new For($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 135:
 this.$ = new ForIn($$[$0-5], $$[$0-3], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 138:
 this.$ = new Llamada_struct($$[$0-6],$$[$0-5],$$[$0-3],[$$[$0-1]], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,26:22,27:$V2,29:24,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr,90:$Vs,94:$Vt,100:$Vu,101:$Vv,106:$Vw,108:$Vx,110:$Vy,111:$Vz,112:$VA,115:$VB},{1:[3]},{5:[1,61],6:62,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,26:22,27:$V2,29:24,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr,90:$Vs,94:$Vt,100:$Vu,101:$Vv,106:$Vw,108:$Vx,110:$Vy,111:$Vz,112:$VA,115:$VB},o($VC,[2,3]),o($VC,[2,4]),{8:[1,63]},{8:[1,64]},o($VC,[2,7]),o($VC,[2,8]),{8:[1,65]},o($VD,$VE,{8:[1,66]}),o($VC,[2,11]),{8:[1,67]},{8:[1,68]},o($VC,[2,14]),{8:[1,69]},{8:[1,70]},{8:[1,71]},o($VC,[2,18]),o($VC,[2,19]),o($VC,[2,20]),o([5,19,27,31,36,37,38,39,40,41,57,58,59,60,61,62,63,64,70,71,72,73,74,75,81,82,83,90,92,94,98,99,100,101,106,108,110,111,112,115],[2,23],{25:72,8:[1,73],34:$VF,42:$VF,43:$VF,44:$VF,45:$VF,46:$VF,47:$VF,48:$VF,49:$VF,50:$VF,51:$VF,52:$VF,53:$VF,54:$VF,55:$VF,56:$VF}),{27:[1,74],30:75,31:$VG,34:$VH},o($VD,$VI,{67:80,27:[1,79],28:$VJ,31:$VK,64:$VL}),{34:[1,83],42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_},{64:[1,99]},{64:[1,100]},{64:[1,101]},{64:[1,102]},{8:[2,106]},{64:[1,103]},{91:[1,104]},{27:[1,105]},{27:[1,107],64:[1,106]},{13:111,24:110,26:112,27:$V$,29:108,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},o($V11,$V21,{105:[1,114]}),o($V11,[2,33]),o($V11,$V31,{64:[1,115]}),o($V11,[2,35]),o($V11,[2,36]),o($V11,[2,37]),{13:111,24:110,26:112,27:$V$,29:116,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{13:111,24:110,26:112,27:$V$,29:117,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},o($V41,[2,56]),o($V41,[2,57]),o($V41,[2,58]),o($V41,[2,59]),o($V41,[2,60]),o($V41,[2,61]),{13:111,24:110,26:112,27:$V$,29:118,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},o($V41,[2,64]),{64:[1,119]},{64:[1,120]},{64:[1,121]},{64:[1,122]},{64:[1,123]},{64:[1,124]},{64:[1,125]},{64:[1,126]},{64:[1,127]},{13:111,24:110,26:112,27:$V$,29:131,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:130,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr,88:128,89:129},{1:[2,1]},o($VC,[2,2]),o($VC,[2,5]),o($VC,[2,6]),o($VC,[2,9]),o($VC,[2,10]),o($VC,[2,12]),o($VC,[2,13]),o($VC,[2,15]),o($VC,[2,16]),o($VC,[2,17]),o($VC,[2,21]),o($VC,[2,22]),o($V51,$V61,{28:$V71,64:[1,133]}),{8:[2,25],35:[1,134]},{32:[1,135]},{80:[1,136]},{13:111,24:110,26:112,27:$V$,29:137,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{28:[1,138]},o($VD,$V81,{28:[1,139],31:$V91}),{13:111,24:110,26:112,27:$V$,29:143,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:[1,142],66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr,104:141},{13:111,24:110,26:112,27:$V$,29:145,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,68:144,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr,86:$Va1,87:$Vb1},{13:111,24:110,26:112,27:$V$,29:148,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vc1,77:$Vd1,78:$Ve1,79:$Vf1,81:$Vp,82:$Vq,83:$Vr,84:$Vg1,85:$Vh1},{13:111,24:110,26:112,27:$V$,29:156,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,43:[1,155],57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{13:111,24:110,26:112,27:$V$,29:158,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:[1,157],57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{13:111,24:110,26:112,27:$V$,29:159,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{13:111,24:110,26:112,27:$V$,29:160,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{13:111,24:110,26:112,27:$V$,29:161,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{13:111,24:110,26:112,27:$V$,29:162,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{13:111,24:110,26:112,27:$V$,29:163,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{13:111,24:110,26:112,27:$V$,29:164,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{13:111,24:110,26:112,27:$V$,29:165,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{13:111,24:110,26:112,27:$V$,29:166,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{13:111,24:110,26:112,27:$V$,29:167,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{13:111,24:110,26:112,27:$V$,29:168,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{13:111,24:110,26:112,27:$V$,29:169,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{13:111,24:110,26:112,27:$V$,29:170,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{13:111,24:110,26:112,27:$V$,29:171,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},o($Vi1,$Vj1,{66:50,24:110,13:111,26:112,107:172,29:173,27:$V$,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr}),o($Vi1,$Vj1,{66:50,24:110,13:111,26:112,29:173,107:174,27:$V$,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr}),{13:111,24:110,26:112,27:$V$,29:175,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{13:111,24:110,26:112,27:$V$,29:176,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{13:111,24:110,26:112,27:$V$,29:177,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{2:$V0,4:178,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,26:22,27:$V2,29:24,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr,90:$Vs,94:$Vt,100:$Vu,101:$Vv,106:$Vw,108:$Vx,110:$Vy,111:$Vz,112:$VA,115:$VB},{91:[1,179]},{7:180,13:111,24:110,26:181,27:[1,182],29:24,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{116:[1,183]},{8:[2,107],34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_},o($V41,$VI,{67:185,31:$VK,64:$VL}),o($V41,$VF),o($V41,$VE),{34:$VH},o($V11,$V21),{64:[1,186]},{13:111,24:110,26:112,27:$V$,29:187,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},o($Vl1,[2,39],{34:$Vk1}),o($Vm1,[2,55],{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY}),{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_,65:[1,188]},{13:111,24:110,26:112,27:$V$,29:189,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{13:111,24:110,26:112,27:$V$,29:190,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{13:111,24:110,26:112,27:$V$,29:191,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{13:111,24:110,26:112,27:$V$,29:192,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{13:111,24:110,26:112,27:$V$,29:193,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{13:111,24:110,26:112,27:$V$,29:194,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{13:111,24:110,26:112,27:$V$,29:195,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{13:111,24:110,26:112,27:$V$,29:196,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{13:111,24:110,26:112,27:$V$,29:197,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{32:[1,198],35:[1,199]},o($Vn1,[2,91]),o([32,34,35,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],[2,92]),o($Vn1,[2,93],{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_}),{13:111,24:110,26:112,27:$V$,29:200,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{26:204,36:$V4,37:$Vo1,38:$V6,39:$V7,40:$V8,41:$V01,65:[1,202],102:201,103:203},{27:[1,206]},{27:[1,207]},{64:[1,208]},{8:[2,26],34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_},{27:[1,209]},{13:111,24:110,26:112,27:$V$,29:210,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{13:111,24:110,26:112,27:$V$,29:211,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{35:[1,213],65:[1,212]},o($Vp1,[2,115]),o($Vi1,[2,117],{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_}),{69:[1,214]},{32:[1,215],34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_,69:$Vq1},o($Vr1,[2,87]),o($Vr1,[2,88]),{28:[1,216],34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_},{64:[1,217]},{64:[1,218]},{64:[1,219]},{64:[1,220]},{64:[1,221]},{64:[1,222]},o($V41,[2,126]),o($Vs1,[2,40],{34:$Vk1,44:$VO,45:$VP,46:$VQ}),o($V41,[2,127],{66:50,24:110,13:111,26:112,29:116,27:$V$,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr}),o($Vs1,[2,41],{34:$Vk1,44:$VO,45:$VP,46:$VQ}),o($Vl1,[2,42],{34:$Vk1}),o($Vl1,[2,43],{34:$Vk1}),o($Vl1,[2,44],{34:$Vk1}),o($Vs1,[2,45],{34:$Vk1,44:$VO,45:$VP,46:$VQ}),o($Vs1,[2,46],{34:$Vk1,44:$VO,45:$VP,46:$VQ}),o($Vt1,[2,47],{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS}),o($Vt1,[2,48],{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS}),o($Vt1,[2,49],{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS}),o($Vt1,[2,50],{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS}),o($Vt1,[2,51],{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS}),o($Vt1,[2,52],{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS}),o($Vm1,[2,53],{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY}),o([8,28,32,35,56,65,69,91],[2,54],{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ}),{35:$Vu1,65:[1,223]},o($Vi1,$Vv1,{109:225,34:$Vw1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_}),{35:$Vu1,65:[1,227]},{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_,65:[1,228]},{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_,65:[1,229]},{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_,65:[1,230]},{6:62,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,26:22,27:$V2,29:24,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr,90:$Vs,92:[1,231],94:$Vt,100:$Vu,101:$Vv,106:$Vw,108:$Vx,110:$Vy,111:$Vz,112:$VA,115:$VB},{26:234,36:$V4,37:$Vo1,38:$V6,39:$V7,40:$V8,41:$V01,113:232,114:233},{8:[1,235]},{27:[1,236],30:75,31:$VG,34:$VH},o($VD,$VI,{67:185,28:$VJ,31:$VK,64:$VL}),{13:111,24:110,26:112,27:$V$,29:237,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{76:$Vc1,77:$Vd1,78:$Ve1,79:$Vf1,84:$Vg1,85:$Vh1},o($V41,$V81,{31:$V91}),{65:[1,238]},{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_,65:[1,239]},o($V41,[2,63]),{34:$Vk1,35:[1,240],42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_},{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_,65:[1,241]},{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_,65:[1,242]},{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_,65:[1,243]},{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_,65:[1,244]},{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_,65:[1,245]},{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_,65:[1,246]},{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_,65:[1,247]},{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_,65:[1,248]},o($V41,[2,89]),{13:111,24:110,26:112,27:$V$,29:131,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:130,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr,89:249},{8:[2,24],34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_},{35:[1,251],65:[1,250]},{91:[1,252]},o($Vi1,[2,111]),{27:[1,254],31:[1,253]},o([27,31],$V31),o($V51,[2,31]),{28:[1,255]},{13:111,24:110,26:112,27:$V$,29:256,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{64:[1,257]},{8:[1,258],34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_},{32:[1,259],34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_},o($Vp1,[2,114]),{13:111,24:110,26:112,27:$V$,29:260,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{13:111,24:110,26:112,27:$V$,29:262,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,68:261,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr,86:$Va1,87:$Vb1},o($Vx1,[2,96]),{13:111,24:110,26:112,27:$V$,29:263,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{13:111,24:110,26:112,27:$V$,29:264,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{13:111,24:110,26:112,27:$V$,29:265,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{65:[1,266]},{65:[1,267]},{65:[1,268]},{65:[1,269]},{8:[2,119]},{13:111,24:110,26:112,27:$V$,29:270,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},o($Vi1,[2,122]),{13:111,24:110,26:112,27:$V$,29:271,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vc1,77:$Vd1,78:$Ve1,79:$Vf1,81:$Vp,82:$Vq,83:$Vr,84:$Vg1,85:$Vh1},{8:[2,120]},{6:273,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,26:22,27:$V2,29:24,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr,90:$Vs,91:[1,272],94:$Vt,100:$Vu,101:$Vv,106:$Vw,108:$Vx,110:$Vy,111:$Vz,112:$VA,115:$VB},{91:[1,274]},{91:[1,275]},{110:[1,276]},{35:[1,278],92:[1,277]},o($Vy1,[2,132]),{27:[1,279]},{13:111,24:110,26:112,27:$V$,29:280,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},o($V51,$V61,{28:$V71}),{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_,91:[1,281]},{91:[1,282]},o($V41,[2,81]),{13:111,24:110,26:112,27:$V$,29:283,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},o($V41,[2,70]),o($V41,[2,71]),o($V41,[2,72]),o($V41,[2,73]),o($V41,[2,74]),o($V41,[2,80]),o($V41,[2,82]),o($V41,[2,83]),o($Vn1,[2,90]),{91:[1,284]},{26:204,36:$V4,37:$Vo1,38:$V6,39:$V7,40:$V8,41:$V01,103:285},{2:$V0,4:286,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,26:22,27:$V2,29:24,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr,90:$Vs,94:$Vt,100:$Vu,101:$Vv,106:$Vw,108:$Vx,110:$Vy,111:$Vz,112:$VA,115:$VB},{32:[1,287]},o($Vi1,[2,113]),{13:111,24:110,26:112,27:[1,288],29:290,31:$V3,33:[1,289],36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_,65:[1,291]},{13:111,24:110,26:112,27:$V$,29:293,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr,117:292},o($VC,[2,94]),o($Vx1,[2,95]),o($Vi1,[2,116],{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_}),{32:[1,294]},{32:$Vq1,34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_},{8:[2,30],34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_},{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_,65:[1,295]},{34:$Vk1,35:[1,296],42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_},o($V41,[2,77]),o($V41,[2,78]),o($V41,[2,84]),o($V41,[2,85]),o($Vi1,$Vv1,{109:297,34:$Vw1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_}),o($Vi1,[2,124],{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_}),{2:$V0,4:298,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,26:22,27:$V2,29:24,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr,90:$Vs,94:$Vt,100:$Vu,101:$Vv,106:$Vw,108:$Vx,110:$Vy,111:$Vz,112:$VA,115:$VB},o($VC,[2,100]),{95:299,97:300,98:$Vz1},{2:$V0,4:302,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,26:22,27:$V2,29:24,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr,90:$Vs,94:$Vt,100:$Vu,101:$Vv,106:$Vw,108:$Vx,110:$Vy,111:$Vz,112:$VA,115:$VB},{64:[1,303]},{8:[2,130]},{26:234,36:$V4,37:$Vo1,38:$V6,39:$V7,40:$V8,41:$V01,114:304},o($Vy1,[2,133]),{8:[1,305],34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_},{2:$V0,4:306,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,26:22,27:$V2,29:24,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr,90:$Vs,94:$Vt,100:$Vu,101:$Vv,106:$Vw,108:$Vx,110:$Vy,111:$Vz,112:$VA,115:$VB},{2:$V0,4:307,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,26:22,27:$V2,29:24,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr,90:$Vs,94:$Vt,100:$Vu,101:$Vv,106:$Vw,108:$Vx,110:$Vy,111:$Vz,112:$VA,115:$VB},{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_,65:[1,308]},{2:$V0,4:309,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,26:22,27:$V2,29:24,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr,90:$Vs,94:$Vt,100:$Vu,101:$Vv,106:$Vw,108:$Vx,110:$Vy,111:$Vz,112:$VA,115:$VB},o($Vi1,[2,110]),{6:62,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,26:22,27:$V2,29:24,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr,90:$Vs,92:[1,310],94:$Vt,100:$Vu,101:$Vv,106:$Vw,108:$Vx,110:$Vy,111:$Vz,112:$VA,115:$VB},{27:[1,311]},o($VD,$VI,{67:185,8:[2,27],31:$VK,64:$VL}),{27:[1,312]},{8:[2,29],34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_},o($V41,[2,79]),{35:[1,314],65:[1,313]},o($Vi1,[2,137],{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_}),o($V41,[2,66]),o($V41,[2,75]),{13:111,24:110,26:112,27:$V$,29:315,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},o($Vi1,[2,121]),{6:62,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,26:22,27:$V2,29:24,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr,90:$Vs,92:[1,316],94:$Vt,100:$Vu,101:$Vv,106:$Vw,108:$Vx,110:$Vy,111:$Vz,112:$VA,115:$VB},{96:317,97:318,98:$Vz1,99:[1,319]},o($VA1,[2,103]),{13:111,24:110,26:112,27:$V$,29:320,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{6:62,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,26:22,27:$V2,29:24,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr,90:$Vs,92:[1,321],94:$Vt,100:$Vu,101:$Vv,106:$Vw,108:$Vx,110:$Vy,111:$Vz,112:$VA,115:$VB},{13:111,24:110,26:112,27:$V$,29:322,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},o($Vy1,[2,131]),{13:111,24:110,26:112,27:$V$,29:323,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{6:62,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,26:22,27:$V2,29:24,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr,90:$Vs,92:[1,324],94:$Vt,100:$Vu,101:$Vv,106:$Vw,108:$Vx,110:$Vy,111:$Vz,112:$VA,115:$VB},{6:62,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,26:22,27:$V2,29:24,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr,90:$Vs,92:[1,325],94:$Vt,100:$Vu,101:$Vv,106:$Vw,108:$Vx,110:$Vy,111:$Vz,112:$VA,115:$VB},o($V41,[2,69]),{6:62,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,26:22,27:$V2,29:24,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr,90:$Vs,92:[1,326],94:$Vt,100:$Vu,101:$Vv,106:$Vw,108:$Vx,110:$Vy,111:$Vz,112:$VA,115:$VB},o($VC,[2,109]),o($Vi1,[2,112]),{8:[2,28]},{8:[2,138]},{13:111,24:110,26:112,27:$V$,29:327,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V01,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr},{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_,65:[1,328]},o($VC,[2,97],{93:[1,329]}),{92:[1,330]},o($VA1,[2,102]),{69:[1,331]},{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_,69:[1,332]},o($VC,[2,128]),{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_,65:[1,333]},{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_,65:[1,334]},o($VC,[2,135]),o($VC,[2,118]),o($VC,[2,108]),o($Vi1,[2,136],{34:$Vk1,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,52:$VW,53:$VX,54:$VY,55:$VZ,56:$V_}),o($V41,[2,76]),{10:336,90:$Vs,91:[1,335]},o($VC,[2,101]),{2:$V0,4:337,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,26:22,27:$V2,29:24,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr,90:$Vs,94:$Vt,100:$Vu,101:$Vv,106:$Vw,108:$Vx,110:$Vy,111:$Vz,112:$VA,115:$VB},{2:$V0,4:338,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,26:22,27:$V2,29:24,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr,90:$Vs,94:$Vt,100:$Vu,101:$Vv,106:$Vw,108:$Vx,110:$Vy,111:$Vz,112:$VA,115:$VB},{8:[2,129]},{91:[1,339]},{2:$V0,4:340,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,26:22,27:$V2,29:24,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr,90:$Vs,94:$Vt,100:$Vu,101:$Vv,106:$Vw,108:$Vx,110:$Vy,111:$Vz,112:$VA,115:$VB},o($VC,[2,99]),{6:62,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,26:22,27:$V2,29:24,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr,90:$Vs,92:[2,105],94:$Vt,100:$Vu,101:$Vv,106:$Vw,108:$Vx,110:$Vy,111:$Vz,112:$VA,115:$VB},o($VA1,[2,104],{7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:17,21:18,22:19,23:20,24:21,26:22,29:24,66:50,6:62,19:$V1,27:$V2,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr,90:$Vs,94:$Vt,100:$Vu,101:$Vv,106:$Vw,108:$Vx,110:$Vy,111:$Vz,112:$VA,115:$VB}),{2:$V0,4:341,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,26:22,27:$V2,29:24,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr,90:$Vs,94:$Vt,100:$Vu,101:$Vv,106:$Vw,108:$Vx,110:$Vy,111:$Vz,112:$VA,115:$VB},{6:62,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,26:22,27:$V2,29:24,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr,90:$Vs,92:[1,342],94:$Vt,100:$Vu,101:$Vv,106:$Vw,108:$Vx,110:$Vy,111:$Vz,112:$VA,115:$VB},{6:62,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,26:22,27:$V2,29:24,31:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,66:50,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,81:$Vp,82:$Vq,83:$Vr,90:$Vs,92:[1,343],94:$Vt,100:$Vu,101:$Vv,106:$Vw,108:$Vx,110:$Vy,111:$Vz,112:$VA,115:$VB},o($VC,[2,98]),o($VC,[2,134])],
defaultActions: {29:[2,106],61:[2,1],223:[2,119],227:[2,120],277:[2,130],312:[2,28],313:[2,138],333:[2,129]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const { Tipo, OperadorAritmetico, OperadorRelacional, OperadorLogico } = require("./AST/Tipo");
	const { Primitivos } = require("./Expresiones/Primitivos");
	const { Aritmetica } = require("./Expresiones/Aritmetica");
	const { Relacional } = require("./Expresiones/Relacional");
	const { Logica } = require("./Expresiones/Logica");
	const { Declaracion } = require("./Instrucciones/Declaracion");
	const { Asignacion } = require("./Instrucciones/Asignacion");
	const { Identificador } = require("./Expresiones/Identificador");
	const { Imprimir } = require("./Instrucciones/Imprimir");
	const { If } = require("./Instrucciones/If");
	const { Switch } = require("./Instrucciones/Switch");
	const { Case } = require("./Instrucciones/Case");
	const { Default } = require("./Instrucciones/Default");
	const { Break } = require("./Instrucciones/Break");
	const { While } = require("./Instrucciones/while");
	const { DoW } = require("./Instrucciones/DoW");
	const { inc_dec } = require("./Instrucciones/inc_dec");
	const { Struct } = require("./Instrucciones/struct");
	const { For } = require("./Instrucciones/For");
	const { ForIn } = require("./Instrucciones/ForIn");
	const { Llamada_struct } = require("./Instrucciones/llamada_struct");
	const { Declaracion_atributo } = require("./Instrucciones/Declaracion_atributo");
	const { Asignacion_atributo } = require("./Instrucciones/Asignacion_atributo");
	const { Continue } = require("./Instrucciones/Continue");
	const { Return } = require("./Instrucciones/Return");
	const { ModificarArreglo } = require("./Instrucciones/ModificarArreglo");
	const { AccesoArreglo } = require("./Expresiones/AccesoArreglo");
	const { Main } = require("./Instrucciones/Main");
	const { Funcion } = require("./Instrucciones/Funcion");
	const { Llamada } = require("./Instrucciones/Llamada");
	const { Caracter } = require("./Nativas/Caracter");
	const { Length } = require("./Nativas/Length");
	const { Parse } = require("./Nativas/Parse");
	const { SubString } = require("./Nativas/SubString");
	const { ToLowerCase } = require("./Nativas/ToLowerCase");
	const { ToUpperCase } = require("./Nativas/ToUpperCase");
	const { Pow } = require("./Nativas/Pow");
	const { Raiz } = require("./Nativas/Raiz");
	const { Seno } = require("./Nativas/Seno");
	const { Coseno } = require("./Nativas/Coseno");
	const { Tangente } = require("./Nativas/Tangente");
	const { Log } = require("./Nativas/Log");
	const { ToInt } = require("./Nativas/ToInt");
	const { ToDouble } = require("./Nativas/ToDouble");
	const { SString } = require("./Nativas/SString");
	const { TypeOf } = require("./Nativas/TypeOf");
	const { Push } = require("./Nativas/Push");
	const { Pop } = require("./Nativas/Pop");
	
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:this.begin('comment');
break;
case 2:this.popState();
break;
case 3:/* skip comment content*/
break;
case 4:/* skip whitespace */
break;
case 5:return 8;
break;
case 6:return 35;
break;
case 7:return 34;
break;
case 8:return 69;
break;
case 9:return 'TERNARIO';
break;
case 10:return 33;
break;
case 11:return 64;
break;
case 12:return 65;
break;
case 13:return 31;
break;
case 14:return 32;
break;
case 15:return 91;
break;
case 16:return 92;
break;
case 17:return 43;
break;
case 18:return 42;
break;
case 19:return 44;
break;
case 20:return 45;
break;
case 21:return 46;
break;
case 22:return 53;
break;
case 23:return 54;
break;
case 24:return 52;
break;
case 25:return 51;
break;
case 26:return 50;
break;
case 27:return 49;
break;
case 28:return 28;
break;
case 29:return 55;
break;
case 30:return 56;
break;
case 31:return 57;
break;
case 32:return 47;
break;
case 33:return 48;
break;
case 34:return 36;
break;
case 35:return 37;
break;
case 36:return 'RFLOAT';
break;
case 37:return 38;
break;
case 38:return 39
break;
case 39:return 40;
break;
case 40:return 62;
break;
case 41:return 63;
break;
case 42:return 41;
break;
case 43:return 'RNULL';
break;
case 44:return 108;
break;
case 45:return 106;
break;
case 46:return 105;
break;
case 47:return 90;
break;
case 48:return 93;
break;
case 49:return 94;
break;
case 50:return 98;
break;
case 51:return 86;
break;
case 52:return 87;
break;
case 53:return 99;
break;
case 54:return 100;
break;
case 55:return 110;
break;
case 56:return 111;
break;
case 57:return 112;
break;
case 58:return	'RFOR';
break;
case 59:return 116;
break;
case 60:return 'RCONTINUE';
break;
case 61:return 101;
break;
case 62:return 70;
break;
case 63:return 71;
break;
case 64:return 72;
break;
case 65:return 73;
break;
case 66:return 74;
break;
case 67:return 75;
break;
case 68:return 76;
break;
case 69:return 77;
break;
case 70:return 78;
break;
case 71:return 79;
break;
case 72:return 80;
break;
case 73:return 81;
break;
case 74:return 'RTODOUBLE';
break;
case 75:return 82;
break;
case 76:return 83;
break;
case 77:return 'RPUSH';
break;
case 78:return 84;
break;
case 79:return 85;
break;
case 80:
break;
case 81:
break;
case 82:
break;
case 83:
break;
case 84:return 59;
break;
case 85:return 58;
break;
case 86:return 27;
break;
case 87:
                            yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2)
                            return 60
                        
break;
case 88:
                            yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2)
                            return 61
                        
break;
case 89:return 5;
break;
case 90: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\s+)/,/^(?:;)/,/^(?:,)/,/^(?:\.)/,/^(?::)/,/^(?:\?)/,/^(?:#)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:&)/,/^(?:\^)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:float\b)/,/^(?:String\b)/,/^(?:char\b)/,/^(?:boolean\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:void\b)/,/^(?:null\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:main\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:begin\b)/,/^(?:end\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:struct\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:pow\b)/,/^(?:sqrt\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:log10\b)/,/^(?:caracterOfPosition\b)/,/^(?:subString\b)/,/^(?:toUppercase\b)/,/^(?:toLowercase\b)/,/^(?:parse\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:string\b)/,/^(?:typeof\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:[//.*[^\n])/,/^(?:[/\*(.|\n)*?\*/])/,/^(?:[0-9]+\.[0-9]+\b)/,/^(?:[0-9]+\b)/,/^(?:[a-zA-Z][a-zA-Z_0-9]*)/,/^(?:[\"]((\\")|(\\')|(\\\n)|[^\"])*[\"])/,/^(?:[\']((\\\n)|(\\")|(\\')|[^\'])[\'])/,/^(?:$)/,/^(?:.)/],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}