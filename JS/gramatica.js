/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
<<<<<<< Updated upstream
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,16],$V2=[1,24],$V3=[1,25],$V4=[1,26],$V5=[1,27],$V6=[1,28],$V7=[1,23],$V8=[1,19],$V9=[1,20],$Va=[1,21],$Vb=[1,22],$Vc=[1,17],$Vd=[1,18],$Ve=[5,20,28,29,30,31,32,33,65,67,69,73,74,75,76,81,83],$Vf=[1,42],$Vg=[1,57],$Vh=[1,61],$Vi=[1,49],$Vj=[1,50],$Vk=[1,51],$Vl=[1,52],$Vm=[1,53],$Vn=[1,54],$Vo=[1,55],$Vp=[1,56],$Vq=[1,58],$Vr=[20,24],$Vs=[2,30],$Vt=[8,27],$Vu=[1,69],$Vv=[27,56],$Vw=[2,95],$Vx=[1,80],$Vy=[1,79],$Vz=[1,81],$VA=[1,82],$VB=[1,83],$VC=[1,84],$VD=[1,85],$VE=[1,86],$VF=[1,87],$VG=[1,88],$VH=[1,89],$VI=[1,90],$VJ=[1,91],$VK=[1,92],$VL=[8,25,27,34,35,36,37,38,39,40,41,42,43,44,45,46,47,56,60],$VM=[2,53],$VN=[1,96],$VO=[1,108],$VP=[5,8,20,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,56,60,65,67,69,73,74,75,76,81,83],$VQ=[1,115],$VR=[1,117],$VS=[8,25,27,46,47,56,60],$VT=[1,137],$VU=[1,138],$VV=[25,27],$VW=[8,21,24,25,27,34,35,36,37,38,39,40,41,42,43,44,45,46,47,56,60],$VX=[8,25,27,34,35,38,39,40,41,42,43,44,45,46,47,56,60],$VY=[8,25,27,40,41,42,43,44,45,46,47,56,60],$VZ=[2,59],$V_=[25,60],$V$=[1,168],$V01=[73,74];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"variables":7,"PTCOMA":8,"imprimir":9,"if":10,"switch":11,"break":12,"return":13,"modificarArreglo":14,"main":15,"funcion":16,"llamada":17,"ptc":18,"tipo":19,"ID":20,"IGUAL":21,"expresion":22,"listaid":23,"CORIZQ":24,"CORDER":25,"NUMERAL":26,"COMA":27,"RINT":28,"RDOUBLE":29,"RSTRING":30,"RCHAR":31,"RBOOLEAN":32,"RVOID":33,"MENOS":34,"MAS":35,"POR":36,"DIVIDIDO":37,"CONCATENAR":38,"REPETICION":39,"MENOR":40,"MAYOR":41,"MENORIGUAL":42,"MAYORIGUAL":43,"IGUALIGUAL":44,"DIFERENTE":45,"AND":46,"OR":47,"NOT":48,"ENTERO":49,"DECIMAL":50,"CADENA":51,"CARACTER":52,"RTRUE":53,"RFALSE":54,"PARIZQ":55,"PARDER":56,"declaracionArregloT1":57,"listaExpresiones":58,"posicion":59,"DOSPT":60,"RBEGIN":61,"REND":62,"listaValores":63,"valores":64,"RIF":65,"LLAVEIZQ":66,"LLAVEDER":67,"RELSE":68,"RSWITCH":69,"caselist":70,"default":71,"case":72,"RCASE":73,"RDEFAULT":74,"RBREAK":75,"RRETURN":76,"parametros":77,"parametro":78,"parametrosLlamada":79,"RMAIN":80,"RPRINT":81,"listaImprimir":82,"RPRINTLN":83,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PTCOMA",20:"ID",21:"IGUAL",24:"CORIZQ",25:"CORDER",26:"NUMERAL",27:"COMA",28:"RINT",29:"RDOUBLE",30:"RSTRING",31:"RCHAR",32:"RBOOLEAN",33:"RVOID",34:"MENOS",35:"MAS",36:"POR",37:"DIVIDIDO",38:"CONCATENAR",39:"REPETICION",40:"MENOR",41:"MAYOR",42:"MENORIGUAL",43:"MAYORIGUAL",44:"IGUALIGUAL",45:"DIFERENTE",46:"AND",47:"OR",48:"NOT",49:"ENTERO",50:"DECIMAL",51:"CADENA",52:"CARACTER",53:"RTRUE",54:"RFALSE",55:"PARIZQ",56:"PARDER",60:"DOSPT",61:"RBEGIN",62:"REND",65:"RIF",66:"LLAVEIZQ",67:"LLAVEDER",68:"RELSE",69:"RSWITCH",73:"RCASE",74:"RDEFAULT",75:"RBREAK",76:"RRETURN",80:"RMAIN",81:"RPRINT",83:"RPRINTLN"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,2],[6,2],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[18,1],[18,0],[7,4],[7,2],[7,3],[7,6],[7,7],[7,6],[23,3],[23,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[22,2],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,2],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,3],[22,1],[22,2],[22,6],[22,1],[59,1],[59,1],[59,1],[57,3],[63,3],[63,1],[64,1],[64,1],[14,5],[58,4],[58,3],[10,7],[10,11],[10,9],[11,8],[70,2],[70,1],[72,4],[71,3],[12,1],[13,2],[16,8],[16,7],[77,3],[77,1],[78,4],[78,2],[17,4],[17,3],[79,3],[79,1],[15,7],[9,4],[9,4],[82,3],[82,1],[82,0]],
=======
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,18],$V2=[1,29],$V3=[1,30],$V4=[1,31],$V5=[1,32],$V6=[1,33],$V7=[1,34],$V8=[1,35],$V9=[1,36],$Va=[1,37],$Vb=[1,38],$Vc=[1,39],$Vd=[1,40],$Ve=[1,41],$Vf=[1,42],$Vg=[1,22],$Vh=[1,23],$Vi=[1,24],$Vj=[1,20],$Vk=[1,21],$Vl=[1,25],$Vm=[1,26],$Vn=[1,27],$Vo=[1,28],$Vp=[5,21,27,28,29,30,31,32,44,45,46,47,48,49,50,51,53,55,57,61,63,64,67,68,69,70,71,74],$Vq=[25,32,33,34,35,36,37,38,39,40,41,42,43],$Vr=[2,50],$Vs=[2,51],$Vt=[2,48],$Vu=[1,55],$Vv=[1,56],$Vw=[1,60],$Vx=[1,59],$Vy=[1,61],$Vz=[1,62],$VA=[1,63],$VB=[1,64],$VC=[1,65],$VD=[1,66],$VE=[1,67],$VF=[1,68],$VG=[1,69],$VH=[1,70],$VI=[1,80],$VJ=[8,22,25,26,32,33,34,35,36,37,38,39,40,41,42,43,52,62],$VK=[8,26],$VL=[8,22,25,26,42,43,52,62],$VM=[26,52],$VN=[8,22,25,26,32,33,36,37,38,39,40,41,42,43,52,62],$VO=[8,22,25,26,36,37,38,39,40,41,42,43,52,62],$VP=[26,55],$VQ=[1,156],$VR=[61,63];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"variables":7,"PTCOMA":8,"imprimir":9,"llamada":10,"if":11,"switch":12,"break":13,"incr_decr":14,"while_instruccion":15,"do_instruccion":16,"struct_crear":17,"for_simple":18,"llamada_struct":19,"tipo":20,"ID":21,"IGUAL":22,"expresion":23,"listaid":24,"PUNTO":25,"COMA":26,"RINT":27,"RDOUBLE":28,"RSTRING":29,"RCHAR":30,"RBOOLEAN":31,"MENOS":32,"MAS":33,"POR":34,"DIVIDIDO":35,"MENOR":36,"MAYOR":37,"MENORIGUAL":38,"MAYORIGUAL":39,"IGUALIGUAL":40,"DIFERENTE":41,"AND":42,"OR":43,"NOT":44,"ENTERO":45,"DECIMAL":46,"CADENA":47,"CARACTER":48,"RTRUE":49,"RFALSE":50,"PARIZQ":51,"PARDER":52,"RIF":53,"LLAVEIZQ":54,"LLAVEDER":55,"RELSE":56,"RSWITCH":57,"caselist":58,"default":59,"case":60,"RCASE":61,"DOSPT":62,"RDEFAULT":63,"RBREAK":64,"parametrosLlamada":65,"parametroLlamada":66,"RPRINT":67,"RPRINTLN":68,"RWHILE":69,"RDO":70,"RSTRUCT":71,"l_atributos":72,"atributo":73,"RFOR":74,"l_expresiones":75,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PTCOMA",21:"ID",22:"IGUAL",25:"PUNTO",26:"COMA",27:"RINT",28:"RDOUBLE",29:"RSTRING",30:"RCHAR",31:"RBOOLEAN",32:"MENOS",33:"MAS",34:"POR",35:"DIVIDIDO",36:"MENOR",37:"MAYOR",38:"MENORIGUAL",39:"MAYORIGUAL",40:"IGUALIGUAL",41:"DIFERENTE",42:"AND",43:"OR",44:"NOT",45:"ENTERO",46:"DECIMAL",47:"CADENA",48:"CARACTER",49:"RTRUE",50:"RFALSE",51:"PARIZQ",52:"PARDER",53:"RIF",54:"LLAVEIZQ",55:"LLAVEDER",56:"RELSE",57:"RSWITCH",61:"RCASE",62:"DOSPT",63:"RDEFAULT",64:"RBREAK",67:"RPRINT",68:"RPRINTLN",69:"RWHILE",70:"RDO",71:"RSTRUCT",74:"RFOR"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,2],[6,1],[6,2],[6,2],[6,1],[6,2],[7,4],[7,2],[7,3],[7,5],[24,3],[24,1],[20,1],[20,1],[20,1],[20,1],[20,1],[23,2],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,3],[23,1],[23,1],[11,7],[11,11],[11,9],[12,8],[58,2],[58,1],[60,4],[59,3],[13,1],[10,4],[10,3],[65,3],[65,1],[66,1],[9,4],[9,6],[9,4],[9,6],[14,3],[14,3],[15,7],[16,8],[17,5],[72,3],[72,1],[73,2],[18,11],[75,3],[75,1],[19,7]],
>>>>>>> Stashed changes
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = $$[$0-1]; return this.$;
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
<<<<<<< Updated upstream
case 3: case 64: case 75: case 83: case 89: case 94:
=======
case 3: case 57: case 64: case 76: case 80:
>>>>>>> Stashed changes
 this.$ = [$$[$0]]; 
break;
case 4:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
<<<<<<< Updated upstream
case 5: case 6: case 9: case 10: case 14: case 54: case 62:
 this.$ = $$[$0-1]; 
break;
case 7: case 8: case 11: case 12: case 13: case 58: case 59: case 65: case 66:
 this.$ = $$[$0]; 
break;
case 17:
 this.$ = new Declaracion($$[$0-3], [$$[$0-2]], _$[$0-3].first_line, _$[$0-3].first_column, $$[$0], false, false, false); 
break;
case 18:
 this.$ = new Declaracion($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column, null, false, false, false); 
=======
case 5: case 6: case 7: case 10: case 11: case 13: case 14: case 49:
 this.$ = $$[$0-1]; 
break;
case 8: case 9: case 12: case 50: case 51:
 this.$ = $$[$0]; 
break;
case 15:
this.$ = $$[$0];
break;
case 16:
this.$ = $$[$0-1];
break;
case 17:
 this.$ = new Declaracion($$[$0-3], [$$[$0-2]], _$[$0-3].first_line, _$[$0-3].first_column, $$[$0]); 
break;
case 18:
 this.$ = new Declaracion($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column, null); 
>>>>>>> Stashed changes
break;
case 19:
 this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 20:
<<<<<<< Updated upstream
 this.$ = new Declaracion($$[$0-5], [$$[$0-2]], _$[$0-5].first_line, _$[$0-5].first_column, $$[$0], true, true, false); 
break;
case 21:
 this.$ = new Declaracion($$[$0-6], [$$[$0-3]], _$[$0-6].first_line, _$[$0-6].first_column, $$[$0], true, false, true); 
break;
case 22:
 this.$ = new Declaracion($$[$0-5], [$$[$0-2]], _$[$0-5].first_line, _$[$0-5].first_column, $$[$0], true, false, false); 
break;
case 23:
this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 24:
 this.$ = new Array(); this.$.push($$[$0]); 
break;
case 25:
 this.$ = Tipo.INT; 
break;
case 26:
 this.$ = Tipo.DOUBLE; 
break;
case 27:
 this.$ = Tipo.STRING; 
break;
case 28:
 this.$ = Tipo.CHAR; 
break;
case 29:
 this.$ = Tipo.BOOL; 
break;
case 30:
 this.$ = Tipo.VOID; 
break;
case 31:
 this.$ = new Aritmetica(OperadorAritmetico.UMENOS, $$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 32:
 this.$ = new Aritmetica(OperadorAritmetico.MAS, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 33:
 this.$ = new Aritmetica(OperadorAritmetico.MENOS, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 34:
 this.$ = new Aritmetica(OperadorAritmetico.POR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 35:
 this.$ = new Aritmetica(OperadorAritmetico.DIV, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 36:
 this.$ = new Aritmetica(OperadorAritmetico.CONCATENAR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 37:
 this.$ = new Aritmetica(OperadorAritmetico.REPETIR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 38:
 this.$ = new Relacional(OperadorRelacional.MENORQUE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 39:
 this.$ = new Relacional(OperadorRelacional.MAYORQUE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 40:
 this.$ = new Relacional(OperadorRelacional.MENORIGUAL, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 41:
 this.$ = new Relacional(OperadorRelacional.MAYORIGUAL, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 42:
 this.$ = new Relacional(OperadorRelacional.IGUALIGUAL, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 43:
 this.$ = new Relacional(OperadorRelacional.DIFERENTE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 44:
 this.$ = new Logica(OperadorLogico.AND, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 45:
 this.$ = new Logica(OperadorLogico.OR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 46:
 this.$ = new Logica(OperadorLogico.NOT, $$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 47:
 this.$ = new Primitivos(Tipo.INT, Number($$[$0]), _$[$0].first_line, _$[$0].first_column); 
break;
case 48:
 this.$ = new Primitivos(Tipo.DOUBLE, Number($$[$0]), _$[$0].first_line, _$[$0].first_column); 
break;
case 49:
 this.$ = new Primitivos(Tipo.STRING, String($$[$0]), _$[$0].first_line, _$[$0].first_column); 
break;
case 50:
 this.$ = new Primitivos(Tipo.CHAR, String($$[$0]), _$[$0].first_line, _$[$0].first_column); 
break;
case 51:
 this.$ = new Primitivos(Tipo.BOOL, true, _$[$0].first_line, _$[$0].first_column); 
break;
case 52:
 this.$ = new Primitivos(Tipo.BOOL, false, _$[$0].first_line, _$[$0].first_column); 
break;
case 53:
 this.$ = new Identificador(String($$[$0]), _$[$0].first_line, _$[$0].first_column); 
break;
case 55:
 this.$ = new Primitivos(Tipo.ARRAY, $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 56:
 this.$ = new AccesoArreglo($$[$0-1], $$[$0], null, null, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 57:
 this.$ = new AccesoArreglo($$[$0-5], null, $$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 60: case 61:
 this.$ = true; 
break;
case 63:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2] 
break;
case 67:
 this.$ = new ModificarArreglo($$[$0-4], $$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 68:
 $$[$0-3].push($$[$0-1]); this.$ = $$[$0-3]; 
break;
case 69:
 this.$ = [$$[$0-1]] 
break;
case 70:
 this.$ = new If($$[$0-4], $$[$0-1], null, null, _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 71:
 this.$ = new If($$[$0-8], $$[$0-5], $$[$0-1], null, _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 72:
 this.$ = new If($$[$0-6], $$[$0-3], null, $$[$0], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 73:
 this.$ = new Switch($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 74:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 76:
 this.$ = new Case($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 77:
 this.$ = new Default($$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 78:
 this.$ = new Break(_$[$0].first_line, _$[$0].first_column); 
break;
case 79:
 this.$ = new Return($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 80:
 this.$ = new Funcion($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 81:
 this.$ = new Funcion($$[$0-6], $$[$0-5], [], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 82: case 88: case 93:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 84:
 this.$ = {'tipo': $$[$0-3], 'identificador': $$[$0-1], 'arreglo':true}; 
break;
case 85:
 this.$ = {'tipo': $$[$0-1], 'identificador': $$[$0], 'arreglo':false}; 
break;
case 86:
 this.$ = new Llamada($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 87:
 this.$ = new Llamada($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 90:
 this.$ = new Main($$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 91:
 this.$ = new Imprimir(false, $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 92:
 this.$ = new Imprimir(true, $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 95:
 this.$ = []; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:$V1,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,65:$V8,69:$V9,75:$Va,76:$Vb,81:$Vc,83:$Vd},{1:[3]},{5:[1,29],6:30,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:$V1,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,65:$V8,69:$V9,75:$Va,76:$Vb,81:$Vc,83:$Vd},o($Ve,[2,3]),o($Ve,[2,4]),{8:[1,31]},{8:[1,32]},o($Ve,[2,7]),o($Ve,[2,8]),{8:[1,33]},{8:[1,34]},o($Ve,[2,11]),o($Ve,[2,12]),o($Ve,[2,13]),o($Ve,[2,16],{18:35,8:[1,36]}),{20:[1,37],23:38,24:[1,39]},{21:[1,40],24:[1,43],55:$Vf,58:41},{55:[1,44]},{55:[1,45]},{55:[1,46]},{55:[1,47]},{8:[2,78]},{17:60,20:$Vg,22:48,24:$Vh,34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:59},o($Vr,$Vs,{80:[1,62]}),o($Vr,[2,25]),o($Vr,[2,26]),o($Vr,[2,27]),o($Vr,[2,28]),o($Vr,[2,29]),{1:[2,1]},o($Ve,[2,2]),o($Ve,[2,5]),o($Ve,[2,6]),o($Ve,[2,9]),o($Ve,[2,10]),o($Ve,[2,14]),o($Ve,[2,15]),o($Vt,[2,24],{21:[1,63],55:[1,64]}),{8:[2,18],27:[1,65]},{25:[1,66]},{17:60,20:$Vg,22:67,24:$Vh,34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:59},{21:[1,68],24:$Vu},{17:60,20:$Vg,22:72,24:$Vh,34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:[1,71],57:59,79:70},{17:60,20:$Vg,22:73,24:$Vh,34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:59},o($Vv,$Vw,{57:59,17:60,82:74,22:75,20:$Vg,24:$Vh,34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq}),o($Vv,$Vw,{57:59,17:60,22:75,82:76,20:$Vg,24:$Vh,34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq}),{17:60,20:$Vg,22:77,24:$Vh,34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:59},{17:60,20:$Vg,22:78,24:$Vh,34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:59},{8:[2,79],34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK},{17:60,20:$Vg,22:93,24:$Vh,34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:59},{17:60,20:$Vg,22:94,24:$Vh,34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:59},o($VL,[2,47]),o($VL,[2,48]),o($VL,[2,49]),o($VL,[2,50]),o($VL,[2,51]),o($VL,[2,52]),o($VL,$VM,{58:95,24:$VN,55:$Vf}),{17:60,20:$Vg,22:97,24:$Vh,34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:59},o($VL,[2,55]),o($VL,[2,58]),{17:60,20:$Vg,22:101,24:$Vh,34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:100,63:98,64:99},{55:[1,102]},{17:60,20:$Vg,22:103,24:$Vh,34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:59},{19:107,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,33:$VO,56:[1,105],77:104,78:106},{20:[1,109]},{20:[1,110]},{8:[2,19],34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK},{17:60,20:$Vg,22:111,24:$Vh,34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:59},{17:60,20:$Vg,22:112,24:$Vh,34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:59},{27:[1,114],56:[1,113]},o($VP,[2,87]),o($Vv,[2,89],{34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK}),{25:$VQ,34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK},{27:$VR,56:[1,116]},o($Vv,[2,94],{34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK}),{27:$VR,56:[1,118]},{34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,56:[1,119]},{34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,56:[1,120]},{17:60,20:$Vg,22:121,24:$Vh,34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:59},{17:60,20:$Vg,22:122,24:$Vh,34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:59},{17:60,20:$Vg,22:123,24:$Vh,34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:59},{17:60,20:$Vg,22:124,24:$Vh,34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:59},{17:60,20:$Vg,22:125,24:$Vh,34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:59},{17:60,20:$Vg,22:126,24:$Vh,34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:59},{17:60,20:$Vg,22:127,24:$Vh,34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:59},{17:60,20:$Vg,22:128,24:$Vh,34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:59},{17:60,20:$Vg,22:129,24:$Vh,34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:59},{17:60,20:$Vg,22:130,24:$Vh,34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:59},{17:60,20:$Vg,22:131,24:$Vh,34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:59},{17:60,20:$Vg,22:132,24:$Vh,34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:59},{17:60,20:$Vg,22:133,24:$Vh,34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:59},{17:60,20:$Vg,22:134,24:$Vh,34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:59},o($VL,[2,31]),o($VS,[2,46],{34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI}),o($VL,[2,56],{24:$Vu}),{17:60,20:$Vg,22:136,24:$Vh,34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:59,59:135,61:$VT,62:$VU},{34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,56:[1,139]},{25:[1,140],27:[1,141]},o($VV,[2,64]),o([25,27,34,35,36,37,38,39,40,41,42,43,44,45,46,47],[2,65]),o($VV,[2,66],{34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK}),{56:[1,142]},{8:[2,17],34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK},{27:[1,144],56:[1,143]},{66:[1,145]},o($Vv,[2,83]),{20:[1,147],24:[1,146]},o($Vr,$Vs),o($Vt,[2,23]),{21:[1,148]},{8:[1,149],34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK},{25:[1,150],34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK},o($VP,[2,86]),{17:60,20:$Vg,22:151,24:$Vh,34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:59},o($VW,[2,69]),{8:[2,91]},{17:60,20:$Vg,22:152,24:$Vh,34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:59},{8:[2,92]},{66:[1,153]},{66:[1,154]},o($VX,[2,32],{36:$Vz,37:$VA}),o($VX,[2,33],{36:$Vz,37:$VA}),o($VL,[2,34]),o($VL,[2,35]),o($VX,[2,36],{36:$Vz,37:$VA}),o($VX,[2,37],{36:$Vz,37:$VA}),o($VY,[2,38],{34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC}),o($VY,[2,39],{34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC}),o($VY,[2,40],{34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC}),o($VY,[2,41],{34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC}),o($VY,[2,42],{34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC}),o($VY,[2,43],{34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC}),o($VS,[2,44],{34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI}),o([8,25,27,47,56,60],[2,45],{34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ}),{60:[1,155]},{25:$VQ,34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,60:$VZ},o($V_,[2,60]),o($V_,[2,61]),o($VL,[2,54]),o($VL,[2,62]),{17:60,20:$Vg,22:101,24:$Vh,34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:100,64:156},{66:[1,157]},{66:[1,158]},{19:107,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,33:$VO,78:159},{2:$V0,4:160,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:$V1,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,65:$V8,69:$V9,75:$Va,76:$Vb,81:$Vc,83:$Vd},{25:[1,161]},o($Vv,[2,85]),{17:60,20:[1,162],22:164,24:$Vh,26:[1,163],34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:59},o($Ve,[2,67]),o($VW,[2,68]),o($Vv,[2,88],{34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK}),o($Vv,[2,93],{34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK}),{2:$V0,4:165,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:$V1,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,65:$V8,69:$V9,75:$Va,76:$Vb,81:$Vc,83:$Vd},{70:166,72:167,73:$V$},{17:60,20:$Vg,22:170,24:$Vh,34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:59,59:169,61:$VT,62:$VU},o($VV,[2,63]),{2:$V0,4:171,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:$V1,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,65:$V8,69:$V9,75:$Va,76:$Vb,81:$Vc,83:$Vd},{2:$V0,4:172,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:$V1,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,65:$V8,69:$V9,75:$Va,76:$Vb,81:$Vc,83:$Vd},o($Vv,[2,82]),{6:30,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:$V1,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,65:$V8,67:[1,173],69:$V9,75:$Va,76:$Vb,81:$Vc,83:$Vd},{20:[1,174]},o([34,35,36,37,38,39,40,41,42,43,44,45,46,47],$VM,{58:95,8:[2,20],24:$VN,55:$Vf}),{20:[1,175]},{8:[2,22],34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK},{6:30,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:$V1,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,65:$V8,67:[1,176],69:$V9,75:$Va,76:$Vb,81:$Vc,83:$Vd},{71:177,72:178,73:$V$,74:[1,179]},o($V01,[2,75]),{17:60,20:$Vg,22:180,24:$Vh,34:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:59},{25:[1,181]},{25:$VZ,34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK},{6:30,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:$V1,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,65:$V8,67:[1,182],69:$V9,75:$Va,76:$Vb,81:$Vc,83:$Vd},{6:30,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:$V1,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,65:$V8,67:[1,183],69:$V9,75:$Va,76:$Vb,81:$Vc,83:$Vd},o($Ve,[2,81]),o($Vv,[2,84]),{8:[2,21]},o($Ve,[2,70],{68:[1,184]}),{67:[1,185]},o($V01,[2,74]),{60:[1,186]},{34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,60:[1,187]},o($VL,[2,57]),o($Ve,[2,90]),o($Ve,[2,80]),{10:189,65:$V8,66:[1,188]},o($Ve,[2,73]),{2:$V0,4:190,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:$V1,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,65:$V8,69:$V9,75:$Va,76:$Vb,81:$Vc,83:$Vd},{2:$V0,4:191,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:$V1,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,65:$V8,69:$V9,75:$Va,76:$Vb,81:$Vc,83:$Vd},{2:$V0,4:192,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:$V1,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,65:$V8,69:$V9,75:$Va,76:$Vb,81:$Vc,83:$Vd},o($Ve,[2,72]),{6:30,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:$V1,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,65:$V8,67:[2,77],69:$V9,75:$Va,76:$Vb,81:$Vc,83:$Vd},o($V01,[2,76],{7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,6:30,20:$V1,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,65:$V8,69:$V9,75:$Va,76:$Vb,81:$Vc,83:$Vd}),{6:30,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:$V1,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,65:$V8,67:[1,193],69:$V9,75:$Va,76:$Vb,81:$Vc,83:$Vd},o($Ve,[2,71])],
defaultActions: {21:[2,78],29:[2,1],116:[2,91],118:[2,92],175:[2,21]},
=======
 this.$ = new Asignacion_atributo($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 21:
this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 22:
 this.$ = new Array(); this.$.push($$[$0]); 
break;
case 23:
 this.$ = Tipo.INT; 
break;
case 24:
 this.$ = Tipo.DOUBLE; 
break;
case 25:
 this.$ = Tipo.STRING; 
break;
case 26:
 this.$ = Tipo.CHAR; 
break;
case 27:
 this.$ = Tipo.BOOL; 
break;
case 28:
 this.$ = new Aritmetica(OperadorAritmetico.UMENOS, $$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 29:
 this.$ = new Aritmetica(OperadorAritmetico.MAS, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 30:
 this.$ = new Aritmetica(OperadorAritmetico.MENOS, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 31:
 this.$ = new Aritmetica(OperadorAritmetico.POR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 32:
 this.$ = new Aritmetica(OperadorAritmetico.DIV, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 33:
 this.$ = new Relacional(OperadorRelacional.MENORQUE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 34:
 this.$ = new Relacional(OperadorRelacional.MAYORQUE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 35:
 this.$ = new Relacional(OperadorRelacional.MENORIGUAL, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 36:
 this.$ = new Relacional(OperadorRelacional.MAYORIGUAL, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 37:
 this.$ = new Relacional(OperadorRelacional.IGUALIGUAL, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 38:
 this.$ = new Relacional(OperadorRelacional.DIFERENTE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 39:
 this.$ = new Logica(OperadorLogico.AND, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 40:
 this.$ = new Logica(OperadorLogico.OR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 41:
 this.$ = new Logica(OperadorLogico.NOT, $$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 42:
 this.$ = new Primitivos(Tipo.INT, $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 43:
 this.$ = new Primitivos(Tipo.DOUBLE, $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 44:
 this.$ = new Primitivos(Tipo.STRING, $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 45:
 this.$ = new Primitivos(Tipo.CHAR, $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 46:
 this.$ = new Primitivos(Tipo.BOOL, true, _$[$0].first_line, _$[$0].first_column); 
break;
case 47:
 this.$ = new Primitivos(Tipo.BOOL, false, _$[$0].first_line, _$[$0].first_column); 
break;
case 48:
 this.$ = new Identificador($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 52:
 this.$ = new If($$[$0-4], $$[$0-1], null, null, _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 53:
 this.$ = new If($$[$0-8], $$[$0-5], $$[$0-1], null, _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 54:
 this.$ = new If($$[$0-6], $$[$0-3], null, $$[$0], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 55:
 this.$ = new Switch($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 56:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 58:
 this.$ = new Case($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 59:
 this.$ = new Default($$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 60:
 this.$ = new Break(_$[$0].first_line, _$[$0].first_column); 
break;
case 61: case 62:
  
break;
case 63: case 75: case 79:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 65:
 this.$ = $$[$0] 
break;
case 66:
 this.$ = new Imprimir($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column,null,false); 
break;
case 67:
 this.$ = new Imprimir($$[$0-3], _$[$0-5].first_line, _$[$0-5].first_column,$$[$0-1],false); 
break;
case 68:
 this.$ = new Imprimir($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column,null,true); 
break;
case 69:
 this.$ = new Imprimir($$[$0-3], _$[$0-5].first_line, _$[$0-5].first_column,$$[$0-1],true); 
break;
case 70:
this.$ = new inc_dec(OperadorAritmetico.MAS,$$[$0-2],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 71:
this.$ = new inc_dec(OperadorAritmetico.MENOS,$$[$0-2],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 72:
 this.$ = new While($$[$0-4],$$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 73:
 this.$ = new DoW($$[$0-1],$$[$0-5], _$[$0-7].first_line, _$[$0-7].first_column);
break;
case 74:
 this.$ = new Struct(Tipo.STRUCT, $$[$0-3], _$[$0-4].first_line, _$[$0-4].first_column, [$$[$0-1]]); 
break;
case 77:
 this.$ = new Declaracion_atributo($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column, null); 
break;
case 78:
 this.$ = new For($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1], _$[$0-10].first_line, _$[$0-10].first_column);
break;
case 81:
 this.$ = new Llamada_struct($$[$0-6],$$[$0-5],$$[$0-3],[$$[$0-1]], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,23:19,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,53:$Vg,57:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,74:$Vo},{1:[3]},{5:[1,43],6:44,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,23:19,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,53:$Vg,57:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,74:$Vo},o($Vp,[2,3]),o($Vp,[2,4]),{8:[1,45]},{8:[1,46]},o($Vq,$Vr,{8:[1,47]}),o($Vp,[2,8]),o($Vp,[2,9]),{8:[1,48]},o($Vq,$Vs,{8:[1,49]}),o($Vp,[2,12]),{8:[1,50]},{8:[1,51]},o($Vp,[2,15]),{8:[1,52]},{21:[1,53],24:54},o($Vq,$Vt,{21:[1,57],22:$Vu,51:$Vv}),{25:[1,58],32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,39:$VD,40:$VE,41:$VF,42:$VG,43:$VH},{51:[1,71]},{51:[1,72]},{51:[1,73]},{51:[1,74]},{8:[2,60]},{51:[1,75]},{54:[1,76]},{21:[1,77]},{51:[1,78]},{21:[2,23]},{21:[2,24]},{21:[2,25]},{21:[2,26]},{21:[2,27]},{10:81,14:82,21:$VI,23:79,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},{10:81,14:82,21:$VI,23:83,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},o($VJ,[2,42]),o($VJ,[2,43]),o($VJ,[2,44]),o($VJ,[2,45]),o($VJ,[2,46]),o($VJ,[2,47]),{10:81,14:82,21:$VI,23:84,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},{1:[2,1]},o($Vp,[2,2]),o($Vp,[2,5]),o($Vp,[2,6]),o($Vp,[2,7]),o($Vp,[2,10]),o($Vp,[2,11]),o($Vp,[2,13]),o($Vp,[2,14]),o($Vp,[2,16]),o($VK,[2,22],{22:[1,85]}),{8:[2,18],26:[1,86]},{10:81,14:82,21:$VI,23:87,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},{10:81,14:82,21:$VI,23:91,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:[1,89],65:88,66:90},{22:[1,92]},{10:81,14:82,21:$VI,23:93,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},{10:81,14:82,21:$VI,23:95,32:$V7,33:[1,94],44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},{10:81,14:82,21:$VI,23:97,32:[1,96],44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},{10:81,14:82,21:$VI,23:98,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},{10:81,14:82,21:$VI,23:99,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},{10:81,14:82,21:$VI,23:100,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},{10:81,14:82,21:$VI,23:101,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},{10:81,14:82,21:$VI,23:102,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},{10:81,14:82,21:$VI,23:103,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},{10:81,14:82,21:$VI,23:104,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},{10:81,14:82,21:$VI,23:105,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},{10:81,14:82,21:$VI,23:106,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},{10:81,14:82,21:$VI,23:107,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},{10:81,14:82,21:$VI,23:108,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},{10:81,14:82,21:$VI,23:109,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},{10:81,14:82,21:$VI,23:110,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},{10:81,14:82,21:$VI,23:111,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},{10:81,14:82,21:$VI,23:112,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},{2:$V0,4:113,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,23:19,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,53:$Vg,57:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,74:$Vo},{54:[1,114]},{7:115,10:81,14:82,20:17,21:[1,116],23:19,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},o($VJ,[2,28]),o($VJ,$Vt,{51:$Vv}),o($VJ,$Vr),o($VJ,$Vs),o($VL,[2,41],{32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,39:$VD,40:$VE,41:$VF}),{32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,52:[1,117]},{10:81,14:82,21:$VI,23:118,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},{21:[1,119]},{8:[2,19],32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,39:$VD,40:$VE,41:$VF,42:$VG,43:$VH},{26:[1,121],52:[1,120]},o($VJ,[2,62]),o($VM,[2,64]),o($VM,[2,65],{32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,39:$VD,40:$VE,41:$VF,42:$VG,43:$VH}),{21:[1,122]},{22:[1,123],32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,39:$VD,40:$VE,41:$VF,42:$VG,43:$VH},o($VJ,[2,70]),o($VN,[2,29],{34:$Vy,35:$Vz}),o($VJ,[2,71],{23:79,10:81,14:82,21:$VI,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf}),o($VN,[2,30],{34:$Vy,35:$Vz}),o($VJ,[2,31]),o($VJ,[2,32]),o($VO,[2,33],{32:$Vw,33:$Vx,34:$Vy,35:$Vz}),o($VO,[2,34],{32:$Vw,33:$Vx,34:$Vy,35:$Vz}),o($VO,[2,35],{32:$Vw,33:$Vx,34:$Vy,35:$Vz}),o($VO,[2,36],{32:$Vw,33:$Vx,34:$Vy,35:$Vz}),o($VO,[2,37],{32:$Vw,33:$Vx,34:$Vy,35:$Vz}),o($VO,[2,38],{32:$Vw,33:$Vx,34:$Vy,35:$Vz}),o($VL,[2,39],{32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,39:$VD,40:$VE,41:$VF}),o([8,22,25,26,43,52,62],[2,40],{32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,39:$VD,40:$VE,41:$VF,42:$VG}),{25:[1,125],32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,52:[1,124]},{25:[1,127],32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,52:[1,126]},{32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,52:[1,128]},{32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,52:[1,129]},{32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,52:[1,130]},{6:44,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,23:19,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,53:$Vg,55:[1,131],57:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,74:$Vo},{20:134,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,72:132,73:133},{8:[1,135]},o($Vq,$Vt,{22:$Vu,51:$Vv}),o($VJ,[2,49]),{8:[2,17],32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,39:$VD,40:$VE,41:$VF,42:$VG,43:$VH},o($VK,[2,21]),o($VJ,[2,61]),{10:81,14:82,21:$VI,23:91,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,66:136},{51:[1,137]},{10:81,14:82,21:$VI,23:138,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},{8:[2,66]},{10:81,14:82,21:$VI,23:139,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},{8:[2,68]},{10:81,14:82,21:$VI,23:140,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},{54:[1,141]},{54:[1,142]},{54:[1,143]},{69:[1,144]},{26:[1,146],55:[1,145]},o($VP,[2,76]),{21:[1,147]},{10:81,14:82,21:$VI,23:148,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},o($VM,[2,63]),{10:81,14:82,21:$VI,23:150,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,75:149},{8:[2,20],32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,39:$VD,40:$VE,41:$VF,42:$VG,43:$VH},{32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,52:[1,151]},{32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,52:[1,152]},{2:$V0,4:153,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,23:19,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,53:$Vg,57:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,74:$Vo},{58:154,60:155,61:$VQ},{2:$V0,4:157,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,23:19,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,53:$Vg,57:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,74:$Vo},{51:[1,158]},{8:[2,74]},{20:134,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,73:159},o($VP,[2,77]),{8:[1,160],32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,39:$VD,40:$VE,41:$VF,42:$VG,43:$VH},{26:[1,162],52:[1,161]},o($VM,[2,80],{32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,39:$VD,40:$VE,41:$VF,42:$VG,43:$VH}),{8:[2,67]},{8:[2,69]},{6:44,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,23:19,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,53:$Vg,55:[1,163],57:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,74:$Vo},{59:164,60:165,61:$VQ,63:[1,166]},o($VR,[2,57]),{10:81,14:82,21:$VI,23:167,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},{6:44,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,23:19,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,53:$Vg,55:[1,168],57:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,74:$Vo},{10:81,14:82,21:$VI,23:169,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},o($VP,[2,75]),{10:81,14:82,21:$VI,23:170,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},{8:[2,81]},{10:81,14:82,21:$VI,23:171,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},o($Vp,[2,52],{56:[1,172]}),{55:[1,173]},o($VR,[2,56]),{62:[1,174]},{32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,62:[1,175]},o($Vp,[2,72]),{32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,52:[1,176]},{32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,52:[1,177]},o($VM,[2,79],{32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,39:$VD,40:$VE,41:$VF,42:$VG,43:$VH}),{11:179,53:$Vg,54:[1,178]},o($Vp,[2,55]),{2:$V0,4:180,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,23:19,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,53:$Vg,57:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,74:$Vo},{2:$V0,4:181,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,23:19,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,53:$Vg,57:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,74:$Vo},{8:[2,73]},{54:[1,182]},{2:$V0,4:183,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,23:19,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,53:$Vg,57:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,74:$Vo},o($Vp,[2,54]),{6:44,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,23:19,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,53:$Vg,55:[2,59],57:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,74:$Vo},o($VR,[2,58],{7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,23:19,6:44,21:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,53:$Vg,57:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,74:$Vo}),{2:$V0,4:184,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,23:19,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,53:$Vg,57:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,74:$Vo},{6:44,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,23:19,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,53:$Vg,55:[1,185],57:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,74:$Vo},{6:44,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,23:19,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,53:$Vg,55:[1,186],57:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,74:$Vo},o($Vp,[2,53]),o($Vp,[2,78])],
defaultActions: {24:[2,60],29:[2,23],30:[2,24],31:[2,25],32:[2,26],33:[2,27],43:[2,1],124:[2,66],126:[2,68],145:[2,74],151:[2,67],152:[2,69],161:[2,81],176:[2,73]},
>>>>>>> Stashed changes
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const { Tipo, OperadorAritmetico, OperadorRelacional, OperadorLogico } = require("./AST/Tipo");
	const { Primitivos } = require("./Expresiones/Primitivos");
	const { Aritmetica } = require("./Expresiones/Aritmetica");
	const { Relacional } = require("./Expresiones/Relacional");
	const { Logica } = require("./Expresiones/Logica");
	const { Declaracion } = require("./Instrucciones/Declaracion");
	const { Asignacion } = require("./Instrucciones/Asignacion");
	const { Identificador } = require("./Expresiones/Identificador");
	const { Imprimir } = require("./Instrucciones/Imprimir");
	const { If } = require("./Instrucciones/If");
	const { Switch } = require("./Instrucciones/Switch");
	const { Case } = require("./Instrucciones/Case");
	const { Default } = require("./Instrucciones/Default");
	const { Break } = require("./Instrucciones/Break");
<<<<<<< Updated upstream
	// const { Continue } = require("./Instrucciones/Continue");
	const { Return } = require("./Instrucciones/Return");
	const { ModificarArreglo } = require("./Instrucciones/ModificarArreglo");
	const { AccesoArreglo } = require("./Expresiones/AccesoArreglo");
	const { Main } = require("./Instrucciones/Main");
	const { Funcion } = require("./Instrucciones/Funcion");
	const { Llamada } = require("./Instrucciones/Llamada");
=======
	const { While } = require("./Instrucciones/while");
	const { DoW } = require("./Instrucciones/DoW");
	const { inc_dec } = require("./Instrucciones/inc_dec");
	const { Struct } = require("./Instrucciones/struct");
	const { For } = require("./Instrucciones/For");
	const { Llamada_struct } = require("./Instrucciones/llamada_struct");
	const { Declaracion_atributo } = require("./Instrucciones/Declaracion_atributo");
	const { Asignacion_atributo } = require("./Instrucciones/Asignacion_atributo");
>>>>>>> Stashed changes
	
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 8;
break;
<<<<<<< Updated upstream
case 1:return 27;
=======
case 1:return 26;
>>>>>>> Stashed changes
break;
case 2:return 25;
break;
<<<<<<< Updated upstream
case 3:return 60;
=======
case 3:return 62;
>>>>>>> Stashed changes
break;
case 4:return 'TERNARIO';
break;
<<<<<<< Updated upstream
case 5:return 26;
break;
case 6:return 55;
=======
case 5:return 51;
break;
case 6:return 52;
>>>>>>> Stashed changes
break;
case 7:return 56;
break;
case 8:return 24;
break;
<<<<<<< Updated upstream
case 9:return 25;
break;
case 10:return 66;
break;
case 11:return 67;
break;
case 12:return 35;
break;
case 13:return 34;
break;
case 14:return 36;
=======
case 9:return 54;
break;
case 10:return 55;
break;
case 11:return 33;
break;
case 12:return 32;
break;
case 13:return 34;
break;
case 14:return 35;
>>>>>>> Stashed changes
break;
case 15:return 37;
break;
<<<<<<< Updated upstream
case 16:return 'MODULO';
break;
case 17:return 44;
break;
case 18:return 45;
break;
case 19:return 43;
break;
case 20:return 42;
break;
case 21:return 41;
break;
case 22:return 40;
break;
case 23:return 21;
break;
case 24:return 46;
break;
case 25:return 47;
=======
case 16:return 40;
break;
case 17:return 41;
break;
case 18:return 39;
break;
case 19:return 38;
break;
case 20:return 37;
break;
case 21:return 36;
break;
case 22:return 22;
break;
case 23:return 42;
break;
case 24:return 43;
break;
case 25:return 44;
>>>>>>> Stashed changes
break;
case 26:return 48;
break;
case 27:return 38;
break;
<<<<<<< Updated upstream
case 28:return 39;
=======
case 28:return 27;
>>>>>>> Stashed changes
break;
case 29:return 28;
break;
case 30:return 29;
break;
<<<<<<< Updated upstream
case 31:return 'RFLOAT';
break;
case 32:return 30;
break;
case 33:return 31
break;
case 34:return 32;
break;
case 35:return 53;
=======
case 31:return 29;
break;
case 32:return 30
break;
case 33:return 31;
break;
case 34:return 49;
break;
case 35:return 50;
>>>>>>> Stashed changes
break;
case 36:return 54;
break;
case 37:return 33;
break;
<<<<<<< Updated upstream
case 38:return 'RNULL';
break;
case 39:return 83;
=======
case 38:return 68;
break;
case 39:return 67;
>>>>>>> Stashed changes
break;
case 40:return 81;
break;
<<<<<<< Updated upstream
case 41:return 80;
break;
case 42:return 65;
break;
case 43:return 68;
break;
case 44:return 69;
break;
case 45:return 73;
break;
case 46:return 61;
break;
case 47:return 62;
break;
case 48:return 74;
break;
case 49:return 75;
break;
case 50:return 'RCONTINUE';
break;
case 51:return 76;
=======
case 41:return 53;
break;
case 42:return 56;
break;
case 43:return 57;
break;
case 44:return 61;
break;
case 45:return 63;
break;
case 46:return 64;
break;
case 47:return 69;
break;
case 48:return 70;
break;
case 49:return 71;
break;
case 50:return	'RFOR';
break;
case 51:
>>>>>>> Stashed changes
break;
case 52:
break;
case 53:
break;
case 54:
break;
<<<<<<< Updated upstream
case 55:
break;
case 56:return 50;
break;
case 57:return 49;
break;
case 58:return 20;
break;
case 59:
                            yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2)
                            return 51
                        
break;
case 60:
                            yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2)
                            return 52
                        
break;
case 61:return 5;
break;
case 62: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:;)/i,/^(?:,)/i,/^(?:\.)/i,/^(?::)/i,/^(?:\?)/i,/^(?:#)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:&)/i,/^(?:\^)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:float\b)/i,/^(?:String\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:void\b)/i,/^(?:null\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:main\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:[//.*[^\n])/i,/^(?:[/\*(.|\n)*?\*/])/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:[a-zA-Z][a-zA-Z_0-9]*)/i,/^(?:[\"]((\\")|(\\')|(\\\n)|[^\"])*[\"])/i,/^(?:[\']((\\\n)|(\\")|(\\')|[^\'])[\'])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
=======
case 55:return 46;
break;
case 56:return 45;
break;
case 57:return 21;
break;
case 58:
                            yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2)
                            return 47
                        
break;
case 59:
                            yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2)
                            return 48
                        
break;
case 60:return 5;
break;
case 61: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:;)/i,/^(?:,)/i,/^(?:\.)/i,/^(?::)/i,/^(?:\?)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:&)/i,/^(?:\^)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:float\b)/i,/^(?:String\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:void\b)/i,/^(?:null\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:main\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:struct\b)/i,/^(?:for\b)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:[//.*])/i,/^(?:[/\*(.|\n)*?\*/])/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:[a-zA-Z][a-zA-Z_0-9]*)/i,/^(?:("((\\([\'\"\\bfnrtv]))|([^\"\\]+))"))/i,/^(?:('((\\([\'\"\\bfnrtv]))|([^\"\\]+))'))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
>>>>>>> Stashed changes
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}